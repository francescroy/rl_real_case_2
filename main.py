

import numpy as np
from random import *
import math
import time
import sys
import matplotlib.pyplot as plt


GAMMA = 0.90

ROUND_COUNTER = 0 # in seconds
TOTAL_ROUND_COUNTER = 0 # in seconds
TOTAL_PRICE = 0 # in euros
ID_USER = 0

CPU_TYPE_1 = 1
CPU_TYPE_2 = 5
MAX_JBS = 15 # (5 or 10 default)
PRICE_JB_S = 0.000025 # 0.000025 default :0.09$ la hora (based on real Amazon EC2...)
PRICE_SLA_S = 0.00025 # 0.0025 default :9$ la hora
CPU_LOAD_SLA = 70 # mean

CYCLE_IN_SECONDS = int(sys.argv[1]) # in seconds
MAX_CPU = 4000
PATTERN = int(sys.argv[3])
PHOTO_INTERVAL = 5 # in seconds (1 or 5 default)
DURACIO_VID = 120 # in seconds
DURACIO_VID_MIN = 110
DURACIO_VID_MAX = 130

ALPHA = 0.15 # default 0.10 or 0.15
QUANTIZATION_TIME = 20 # default 10 or 20
QUANTIZATION_CPU = 20 # default 10 or 20
NUM_EXP = 10
TOTAL_EXP = 0

horari = [None] * CYCLE_IN_SECONDS # Al principi es una llista de None's.
                                   # Es regenera a cada cycle.
                                   # Cada element es o None o una list de mini-lists de 2...

# random numbers from 15 to CYCLE_IN_SECONDS - 15
random_numbers=[]
if CYCLE_IN_SECONDS == 600:
    if PATTERN==1:
        random_numbers = [355, 188, 172, 69, 45, 85, 348, 541, 327, 488, 216, 255, 30, 274, 347, 425, 175, 43, 437, 333, 452, 329, 230, 43, 420, 518, 358, 416, 337, 239, 471, 262, 428, 61, 142, 376, 465, 442, 440, 57, 370, 439, 387, 444, 266, 161, 303, 509, 551, 579, 333, 479, 194, 276, 187, 286, 28, 500, 531, 69, 320, 26, 128, 448, 413, 34, 392, 554, 457, 72, 273, 393, 539, 322, 330, 452, 533, 479, 291, 149, 233, 339, 161, 412, 478, 248, 309, 417, 570, 23, 270, 463, 276, 19, 143, 240, 87, 332, 157, 470, 162, 493, 288, 294, 438, 262, 43, 278, 442, 348, 570, 24, 372, 435, 170, 140, 542, 169, 48, 321, 584, 100, 551, 434, 154, 142, 20, 289, 460, 285, 465, 465, 429, 512, 298, 309, 238, 286, 375, 486, 246, 429, 88, 101, 534, 179, 34, 564, 147, 348, 160, 384, 368, 148, 525, 517, 373, 211, 153, 575, 489, 161, 459, 377, 44, 76, 143, 310, 318, 537, 304, 27, 68, 368, 452, 294, 282, 306, 524, 177, 104, 185, 120, 486, 549, 564, 398, 446, 462, 273, 527, 156, 42, 220, 448, 417, 196, 445, 447, 367, 37, 298, 228, 572, 263, 237, 214, 564, 42, 353, 43, 410, 573, 521, 543, 319, 350, 100, 153, 585, 23, 423, 409, 157, 109, 449, 378, 286, 203, 173, 120, 20, 449, 376, 149, 291, 325, 404, 518, 37, 474, 567, 300, 137, 150, 48, 580, 474, 142, 68, 374, 82, 356, 154, 34, 302, 175, 26, 403, 562, 373, 365, 334, 359, 485, 93, 289, 17, 243, 301, 434, 564, 537, 53, 175, 233, 168, 308, 34, 310, 61, 209, 446, 398, 435, 530, 106, 275, 84, 359, 95, 305, 131, 563, 145, 90, 187, 520, 348, 485, 530, 525, 293, 276, 497, 498, 464, 470, 374, 429, 456, 378, 129, 217, 247, 159, 193, 561, 543, 151, 485, 66, 202, 444, 38, 133, 456, 69, 193, 368, 135, 56, 272, 73, 486, 410, 296, 435, 371, 209, 63, 513, 310, 80, 297, 481, 313, 441, 237, 45, 366, 319, 187, 460, 248, 241, 424, 386, 369, 46, 67, 194, 384, 172, 383, 461, 80, 398, 54, 157, 202, 153, 56, 78, 366, 171, 573, 353, 386, 149, 138, 301, 538, 489, 307, 576, 146, 322, 495, 320, 417, 549, 136, 492, 175, 565, 549, 293, 406, 536, 565, 377, 102, 559, 341, 439, 277, 387, 535, 542, 78, 544, 217, 33, 552, 264, 582, 386, 341, 100, 371, 302, 294, 274, 452, 163, 120, 267, 571, 49, 577, 423, 306, 74, 324, 28, 362, 491, 117, 517, 360, 563, 240, 113, 177, 530, 220, 486, 300, 77, 315, 409, 211, 268, 78, 362, 222, 577, 345, 376, 312, 483, 229, 19, 70, 150, 54, 297, 548, 299, 452, 152, 282, 141, 523, 98, 23, 428, 18, 496, 526, 379, 451, 453, 353, 332, 389, 295, 433, 528, 401, 162, 97, 300, 556, 480, 327, 184, 327, 38, 289, 103, 399, 185, 260, 296, 127, 173, 503, 455, 46, 276, 107, 386, 466, 502, 503, 518, 185, 492, 18, 363, 329, 165, 178, 121, 420, 160, 460, 36, 528, 259, 579, 319, 128, 159, 402, 212, 562, 508, 326, 187, 460, 371, 441, 362, 174, 521, 573, 531, 36, 433, 578, 128, 235, 479, 473, 405, 49, 36, 278, 278, 34, 32, 426, 525, 81, 54, 48, 201, 576, 283, 141, 542, 107, 88, 76, 238, 204, 356, 38, 76, 164, 65, 515, 336, 226, 525, 360, 43, 181, 397, 282, 565, 168, 555, 519, 361, 85, 540, 248, 311, 313, 117, 481, 76, 169, 236, 430, 146, 192, 153, 31, 160, 60, 73, 552, 89, 90, 305, 236, 525, 545, 239, 133, 442, 418, 311, 120, 391, 140, 94, 464, 285, 67, 47, 464, 215, 177, 384, 66, 158, 362, 189, 474, 517, 86, 394, 528, 562, 16, 484, 455, 183, 476, 434, 290, 452, 284, 400, 260, 416, 472, 406, 272, 36, 70, 547, 338, 32, 35, 333, 175, 107, 343, 578, 103, 26, 41, 506, 80, 130, 551, 251, 261, 402, 384, 321, 516, 94, 118, 393, 480, 376, 413, 467, 230, 126, 81, 545, 405, 493, 438, 44, 323, 513, 244, 232, 111, 325, 534, 532, 219, 146, 213, 328, 107, 314, 87, 370, 510, 356, 501, 208, 378, 420, 574, 232, 75, 557, 29, 261, 40, 139, 311, 105, 57, 93, 571, 287, 426, 496, 499, 355, 134, 187, 166, 243, 314, 249, 276, 44, 371, 99, 546, 328, 510, 24, 159, 84, 172, 547, 297, 473, 350, 394, 36, 462, 455, 273, 508, 458, 31, 301, 337, 253, 164, 408, 286, 168, 262, 94, 414, 98, 296, 137, 352, 195, 157, 527, 253, 189, 438, 377, 100, 170, 85, 17, 437, 492, 47, 52, 293, 374, 103, 46, 42, 359, 494, 302, 372, 197, 475, 95, 109, 219, 172, 403, 24, 239, 553, 362, 463, 66, 224, 521, 197, 143, 372, 214, 181, 27, 27, 258, 198, 47, 204, 306, 283, 383, 73, 129, 115, 549, 200, 341, 144, 441, 474, 566, 80, 535, 336, 175, 323, 334, 225, 105, 353, 177, 200, 340, 378, 398, 441, 131, 270, 127, 276, 410, 479, 546, 52, 540, 38, 268, 455, 494, 480, 114, 180, 522, 168, 24, 117, 545, 423, 357, 296, 87, 109, 258, 138, 540, 331, 352, 447, 371, 489, 402, 263, 67, 485, 130, 169, 574, 60, 393, 46, 348, 131, 23, 86, 187, 311, 66, 351, 322, 72, 368, 84, 158, 69, 524, 93, 220, 295, 577, 244, 333, 234, 391, 202, 584, 457, 108, 74, 301, 368, 540, 520, 381, 68, 213, 238, 68, 102, 125, 392, 129, 544, 241, 546, 68, 333, 275, 116, 283, 242, 444, 547, 572, 141, 526, 312, 70, 175, 79, 150, 547, 316, 235, 254, 379, 490, 389, 298, 212, 260, 343, 347, 89, 79, 149, 394, 88, 440, 181, 202, 54, 534, 563, 30, 71, 84, 581, 35, 381, 420, 174, 496, 110, 407, 345, 414, 162, 346, 558, 231, 50, 132, 564, 375, 106, 40, 142, 38, 385, 59, 408, 265, 25, 460, 429, 201, 511, 426, 102, 36, 133, 504, 108, 554, 444, 244, 157, 414, 494, 193, 389, 556, 260, 51, 453, 106, 147, 513, 136, 343, 51, 56, 388, 433, 326, 279, 446, 158, 493, 109, 477, 491, 133, 304, 136, 186, 325, 128, 356, 395, 465, 229, 246, 463, 345, 107, 539, 420, 561, 561, 100, 270, 399, 142, 80, 476, 357, 568, 370, 134, 128, 214, 18, 261, 211, 62, 412, 279, 453, 109, 469, 85, 46, 500, 426, 275, 155, 329, 570, 166, 403, 219, 429, 414, 475, 217, 61, 131, 148, 148, 511, 218, 461, 501, 552, 178, 236, 293, 572, 358, 303, 43, 444, 244, 342, 231, 155, 141, 406, 346, 378, 337, 16, 341, 517, 554, 156, 372, 53, 159, 350, 37, 388, 136, 116, 366, 173, 259, 360, 282, 82, 185, 426, 42, 254, 374, 243, 493, 30, 525, 348, 56, 337, 533, 132, 277, 311, 122, 298, 222, 420, 364, 580, 584, 152, 207, 233, 128, 390, 249, 491, 493, 345, 235, 142, 438, 373, 281, 292, 284, 46, 127, 389, 34, 165, 162, 177, 329, 284, 277, 45, 479, 509, 577, 225, 521, 231, 122, 338, 197, 151, 485, 286, 381, 467, 353, 145, 393, 193, 298, 390, 440, 520, 338, 184, 491, 571, 461, 111, 525, 227, 179, 457, 572, 512, 30, 318, 561, 512, 177, 28, 529, 34, 107, 106, 155, 584, 87, 340, 245, 395, 312, 498, 130, 48, 370, 312, 388, 349, 476, 288, 472, 442, 140, 271, 235, 446, 27, 516, 53, 259, 565, 50, 460, 435, 205, 438, 338, 424, 475, 299, 220, 173, 373, 425, 238, 456, 229, 213, 406, 518, 95, 560, 389, 333, 369, 580, 501, 263, 516, 414, 506, 330, 500, 358, 25, 281, 416, 193, 20, 109, 68, 378, 551, 385, 561, 543, 529, 319, 319, 47, 571, 296, 413, 156, 140, 555, 215, 31, 336, 417, 140, 401, 176, 108, 210, 18, 568, 391, 132, 487, 412, 236, 348, 65, 521, 134, 380, 418, 475, 331, 182, 66, 375, 498, 251, 72, 76, 119, 152, 418, 582, 70, 371, 463, 200, 248, 182, 124, 116, 129, 307, 391, 423, 182, 338, 291, 159, 373, 398, 278, 98, 31, 583, 340, 128, 216, 77, 453, 531, 22, 333, 96, 360, 303, 519, 538, 389, 147, 174, 155, 391, 63, 312, 450, 565, 483, 508, 256, 539, 261, 526, 97, 212, 303, 186, 369, 98, 475, 487, 201, 417, 306, 517, 39, 204, 206, 575, 541, 194, 342, 155, 557, 346, 202, 575, 280, 144, 393, 445, 460, 67, 64, 554, 317, 162, 69, 411, 306, 383, 268, 533, 222, 428, 133, 331, 196, 535, 409, 457, 373, 326, 184, 324, 420, 175, 394, 362, 393, 122, 550, 535, 122, 566, 366, 61, 555, 319, 224, 309, 185, 335, 132, 141, 548, 111, 303, 479, 307, 34, 509, 339, 368, 215, 286, 178, 221, 546, 528, 445, 177, 371, 402, 258, 89, 444, 278, 398, 181, 497, 520, 400, 19, 381, 436, 282, 164, 155, 36, 108, 191, 258, 465, 498, 570, 155, 172, 413, 273, 189, 280, 199, 154, 123, 371, 28, 554, 403, 357, 492, 468, 357, 348, 488, 202, 114, 161, 15, 55, 134, 287, 385, 564, 229, 389, 575, 577, 517, 424, 321, 523, 316, 365, 163, 521, 417, 289, 118, 563, 113, 372, 106, 492, 192, 293, 403, 537, 279, 314, 134, 158, 512, 469, 342, 271, 109, 352, 579, 573, 476, 59, 16, 236, 406, 491, 535, 552, 249, 82, 574, 397, 266, 270, 344, 507, 522, 139, 411, 505, 123, 16, 572, 554, 514, 569, 223, 138, 535, 74, 197, 218, 181, 311, 297, 259, 127, 312, 496, 185, 413, 167, 447, 213, 476, 420, 304, 524, 188, 53, 206, 88, 308, 422, 54, 474, 357, 192, 364, 274, 49, 80, 382, 496, 321, 58, 458, 339, 320, 204, 18, 142, 348, 374, 314, 310, 166, 539, 494, 471, 81, 412, 324, 37, 454, 464, 525, 350, 347, 92, 48, 41, 430, 491, 540, 248, 504, 205, 164, 218, 540, 150, 284, 303, 61, 278, 466, 479, 495, 565, 538, 278, 531, 437, 246, 497, 449, 457, 283, 116, 306, 251, 493, 52, 19, 249, 409, 315, 475, 166, 528, 474, 311, 495, 403, 148, 400, 532, 497, 309, 446, 296, 480, 15, 371, 430, 527, 190, 495, 194, 336, 439, 82, 113, 202, 187, 228, 568, 341, 92, 270, 332, 385, 243, 585, 226, 356, 127, 422, 304, 416, 43, 402, 434, 432, 36, 325, 297, 244, 289, 280, 567, 314, 557, 450, 96, 185, 105, 450, 242, 375, 143, 99, 281, 257, 362, 376, 438, 284, 578, 293, 127, 412, 130, 246, 443, 245, 513, 217, 423, 511, 100, 441, 113, 160, 578, 27, 120, 329, 278, 537, 564, 489, 353, 341, 448, 219, 511, 500, 105, 491, 549, 377, 411, 291, 560, 47, 576, 445, 39, 584, 353, 29, 106, 403, 109, 359, 562, 283, 394, 536, 454, 496, 247, 116, 273, 448, 504, 260, 201, 86, 446, 347, 227, 93, 516, 303, 477, 50, 79, 548, 122, 519, 53, 213, 499, 446, 511, 426, 249, 69, 57, 94, 421, 510, 412, 126, 91, 31, 138, 536, 295, 541, 269, 411, 195, 232, 53, 124, 368, 569, 76, 31, 381, 29, 549, 257, 385, 138, 452, 332, 27, 368, 381, 391, 147, 131, 59, 166, 531, 346, 513, 282, 137, 422, 245, 317, 121, 111, 18, 355, 443, 35, 222, 545, 340, 215, 25, 483, 349, 161, 382, 56, 416, 165, 519, 321, 286, 315, 94, 154, 247, 83, 274, 16, 414, 185, 375, 552, 324, 151, 518, 547, 479, 97, 313, 130, 114, 527, 283, 224, 349, 437, 295, 69, 316, 407, 272, 489, 123, 349, 480, 92, 133, 373, 366, 464, 47, 511, 542, 32, 434, 423, 317, 27, 230, 414, 550, 428, 512, 393, 263]
    else:
        #50% uniformely distributed and 50% in 15 - 65
        random_numbers = [264, 30, 456, 28, 168, 65, 367, 26, 583, 50, 165, 40, 545, 44, 46, 15, 341, 32, 241, 64, 384, 27, 566, 29, 412, 30, 577, 27, 51, 23, 428, 44, 89, 28, 250, 61, 159, 53, 270, 33, 67, 55, 119, 53, 473, 17, 114, 47, 36, 16, 91, 51, 203, 41, 447, 34, 386, 35, 315, 15, 304, 44, 504, 23, 158, 25, 107, 47, 464, 49, 327, 40, 214, 39, 306, 17, 548, 17, 483, 21, 87, 22, 30, 53, 129, 22, 471, 47, 115, 49, 86, 21, 475, 39, 405, 26, 377, 51, 345, 24, 381, 32, 317, 48, 203, 26, 67, 39, 561, 43, 192, 38, 85, 17, 330, 61, 348, 63, 77, 45, 244, 19, 583, 65, 433, 36, 141, 26, 231, 50, 522, 33, 430, 62, 120, 38, 27, 36, 203, 49, 458, 59, 254, 33, 228, 19, 187, 18, 436, 22, 298, 42, 395, 22, 81, 37, 401, 58, 49, 25, 581, 18, 104, 25, 384, 25, 169, 38, 200, 35, 298, 58, 43, 44, 176, 45, 233, 56, 96, 48, 506, 30, 70, 63, 305, 32, 338, 51, 132, 18, 543, 58, 33, 24, 467, 44, 364, 16, 232, 55, 229, 27, 309, 25, 499, 55, 512, 36, 188, 58, 484, 15, 136, 18, 164, 36, 457, 60, 251, 36, 155, 16, 203, 16, 430, 46, 572, 22, 210, 20, 246, 32, 575, 54, 185, 57, 318, 18, 419, 56, 147, 49, 245, 51, 299, 56, 297, 25, 108, 18, 577, 59, 327, 49, 564, 19, 491, 32, 306, 42, 112, 56, 235, 34, 193, 57, 238, 35, 464, 61, 201, 50, 393, 43, 358, 28, 34, 15, 312, 25, 118, 36, 216, 52, 238, 25, 77, 37, 583, 24, 263, 61, 214, 43, 454, 59, 47, 28, 54, 20, 489, 21, 534, 50, 246, 20, 59, 20, 432, 46, 134, 63, 75, 31, 75, 41, 244, 65, 57, 48, 57, 64, 445, 27, 537, 47, 233, 56, 275, 26, 459, 58, 380, 64, 254, 64, 305, 42, 572, 26, 218, 63, 556, 50, 411, 28, 296, 43, 116, 45, 293, 52, 541, 49, 438, 61, 261, 20, 565, 56, 341, 47, 406, 42, 439, 54, 373, 39, 298, 38, 391, 33, 306, 21, 323, 49, 447, 22, 392, 15, 58, 21, 325, 29, 336, 52, 313, 51, 473, 62, 474, 42, 67, 51, 17, 29, 220, 25, 282, 24, 486, 44, 214, 41, 485, 61, 330, 22, 547, 62, 494, 36, 254, 42, 377, 33, 404, 39, 366, 46, 45, 23, 328, 38, 322, 27, 174, 29, 368, 17, 229, 64, 110, 51, 259, 59, 135, 17, 72, 29, 419, 45, 366, 26, 524, 43, 103, 30, 75, 59, 529, 38, 449, 45, 350, 21, 353, 30, 390, 38, 511, 40, 427, 28, 380, 62, 148, 40, 376, 56, 345, 37, 332, 42, 368, 37, 489, 61, 401, 47, 476, 35, 498, 33, 519, 65, 96, 58, 253, 43, 431, 21, 457, 23, 349, 20, 192, 23, 579, 27, 96, 63, 231, 30, 585, 55, 106, 64, 70, 24, 31, 25, 45, 21, 512, 24, 44, 28, 228, 63, 468, 25, 119, 36, 314, 44, 455, 16, 577, 59, 323, 49, 448, 23, 553, 17, 122, 24, 402, 54, 201, 37, 425, 35, 294, 39, 340, 27, 60, 41, 85, 24, 441, 44, 523, 45, 381, 38, 330, 55, 118, 62, 500, 18, 430, 58, 69, 53, 477, 40, 545, 45, 274, 33, 179, 43, 544, 15, 121, 48, 193, 25, 327, 55, 86, 35, 401, 44, 527, 55, 242, 40, 560, 47, 446, 15, 397, 36, 267, 48, 330, 62, 457, 27, 527, 53, 393, 43, 521, 29, 494, 44, 314, 43, 512, 34, 57, 18, 241, 16, 481, 44, 314, 60, 176, 40, 350, 16, 43, 43, 469, 58, 278, 32, 205, 55, 534, 47, 359, 34, 138, 40, 242, 16, 276, 51, 417, 65, 339, 32, 500, 16, 325, 58, 222, 58, 210, 28, 264, 15, 36, 44, 390, 63, 273, 55, 95, 19, 458, 63, 516, 19, 404, 36, 317, 39, 477, 41, 121, 59, 351, 18, 149, 25, 79, 38, 355, 20, 260, 29, 551, 46, 55, 58, 357, 52, 435, 20, 283, 27, 344, 33, 333, 46, 435, 31, 46, 62, 440, 43, 279, 36, 492, 50, 56, 62, 456, 18, 85, 26, 434, 17, 436, 58, 301, 22, 441, 58, 568, 44, 116, 58, 543, 59, 379, 37, 58, 35, 254, 22, 564, 54, 479, 33, 297, 26, 335, 19, 340, 22, 480, 28, 534, 28, 99, 32, 482, 34, 427, 54, 394, 36, 94, 40, 559, 34, 253, 37, 24, 63, 319, 56, 584, 26, 527, 51, 59, 41, 392, 65, 305, 62, 433, 22, 67, 43, 511, 19, 416, 44, 76, 49, 431, 23, 133, 39, 253, 45, 78, 36, 269, 36, 302, 39, 19, 44, 530, 64, 370, 46, 222, 29, 360, 29, 503, 60, 395, 19, 389, 15, 194, 17, 248, 47, 346, 46, 272, 34, 215, 61, 454, 15, 20, 26, 236, 49, 69, 38, 581, 65, 271, 56, 298, 45, 122, 44, 169, 43, 581, 29, 153, 30, 32, 41, 321, 40, 515, 61, 113, 30, 425, 63, 237, 44, 177, 29, 334, 40, 262, 15, 567, 24, 200, 56, 19, 44, 134, 51, 98, 32, 218, 57, 322, 37, 335, 20, 541, 27, 440, 48, 68, 61, 358, 61, 385, 37, 525, 62, 471, 43, 92, 40, 383, 26, 420, 45, 286, 42, 188, 63, 145, 51, 382, 16, 95, 58, 125, 61, 481, 62, 175, 64, 225, 54, 570, 29, 252, 58, 440, 61, 36, 32, 204, 49, 454, 63, 70, 54, 512, 55, 522, 22, 585, 21, 104, 35, 358, 57, 268, 52, 178, 65, 87, 41, 483, 26, 285, 19, 375, 38, 342, 26, 388, 15, 359, 60, 372, 59, 145, 44, 195, 63, 73, 18, 227, 62, 234, 36, 564, 31, 407, 26, 163, 17, 467, 19, 340, 48, 240, 33, 281, 59, 309, 31, 43, 54, 412, 28, 537, 38, 226, 63, 78, 25, 231, 28, 495, 28, 26, 54, 569, 58, 453, 52, 509, 26, 270, 16, 63, 32, 545, 42, 61, 54, 297, 19, 311, 27, 277, 50, 343, 25, 464, 51, 470, 30, 309, 43, 397, 34, 479, 48, 476, 31, 16, 20, 371, 17, 376, 21, 290, 56, 470, 36, 312, 21, 257, 18, 237, 23, 30, 60, 577, 15, 236, 31, 514, 18, 72, 45, 577, 40, 531, 60, 134, 21, 418, 32, 33, 15, 169, 45, 127, 41, 287, 49, 515, 43, 85, 27, 55, 60, 93, 22, 305, 29, 514, 16, 167, 35, 136, 64, 185, 57, 20, 21, 534, 62, 97, 39, 337, 50, 257, 43, 505, 32, 19, 35, 78, 28, 36, 41, 514, 21, 305, 44, 101, 20, 311, 33, 189, 27, 122, 19, 26, 42, 85, 63, 217, 30, 269, 36, 496, 56, 15, 27, 483, 44, 42, 65, 438, 44, 385, 34, 441, 60, 446, 45, 244, 60, 169, 55, 303, 32, 393, 46, 457, 62, 514, 25, 324, 46, 378, 24, 178, 34, 129, 50, 211, 21, 569, 19, 419, 23, 104, 18, 437, 22, 378, 48, 248, 23, 404, 25, 118, 43, 502, 21, 144, 53, 281, 47, 461, 28, 73, 40, 425, 30, 177, 41, 42, 30, 329, 53, 462, 58, 491, 15, 216, 39, 326, 50, 134, 28, 166, 15, 165, 55, 27, 52, 308, 28, 298, 47, 336, 43, 238, 64, 77, 16, 254, 20, 101, 28, 282, 16, 467, 23, 570, 42, 498, 46, 371, 41, 211, 56, 126, 44, 471, 58, 560, 20, 93, 56, 162, 18, 445, 38, 202, 49, 405, 27, 529, 21, 409, 37, 160, 33, 104, 16, 487, 28, 298, 53, 576, 23, 180, 65, 128, 20, 133, 39, 464, 28, 129, 16, 97, 50, 135, 17, 205, 19, 396, 44, 153, 62, 205, 55, 138, 57, 111, 49, 348, 49, 243, 57, 175, 48, 506, 34, 274, 65, 126, 26, 159, 29, 219, 21, 463, 53, 288, 64, 410, 50, 212, 34, 208, 59, 364, 41, 541, 45, 510, 42, 488, 65, 317, 45, 483, 50, 512, 28, 106, 24, 245, 24, 28, 22, 364, 28, 84, 19, 116, 48, 518, 28, 352, 59, 507, 50, 526, 39, 240, 40, 95, 61, 474, 59, 197, 37, 48, 20, 409, 36, 330, 15, 227, 48, 567, 22, 328, 31, 93, 52, 54, 44, 463, 61, 465, 29, 18, 55, 336, 26, 249, 56, 199, 34, 357, 27, 244, 57, 28, 59, 434, 38, 329, 44, 171, 21, 372, 37, 498, 52, 195, 50, 534, 52, 120, 27, 410, 47, 213, 42, 494, 27, 204, 27, 557, 23, 474, 49, 562, 22, 451, 64, 218, 64, 490, 17, 437, 19, 196, 18, 469, 60, 459, 48, 464, 41, 54, 56, 45, 26, 145, 30, 568, 62, 428, 54, 24, 20, 451, 59, 68, 35, 120, 46, 268, 58, 559, 19, 473, 60, 455, 32, 565, 25, 160, 26, 243, 39, 240, 31, 90, 54, 155, 61, 242, 32, 532, 29, 272, 31, 455, 16, 199, 23, 136, 61, 391, 24, 313, 52, 271, 59, 383, 21, 443, 28, 53, 60, 155, 48, 560, 56, 23, 24, 337, 61, 304, 24, 217, 18, 526, 29, 515, 34, 167, 36, 335, 63, 421, 49, 120, 29, 389, 50, 267, 65, 515, 56, 506, 30, 124, 57, 451, 43, 479, 48, 250, 62, 378, 25, 416, 30, 314, 16, 240, 37, 285, 23, 519, 53, 445, 65, 479, 45, 484, 47, 117, 43, 250, 24, 339, 18, 553, 62, 511, 45, 498, 29, 44, 52, 321, 62, 118, 16, 576, 16, 548, 54, 195, 40, 143, 49, 264, 55, 106, 65, 232, 59, 456, 41, 97, 49, 265, 48, 531, 34, 124, 51, 214, 65, 277, 54, 52, 26, 384, 38, 135, 22, 208, 51, 132, 54, 259, 47, 405, 50, 131, 39, 514, 56, 31, 21, 511, 18, 355, 30, 206, 18, 308, 29, 559, 15, 512, 29, 161, 38, 288, 33, 565, 50, 523, 52, 373, 35, 287, 59, 177, 39, 183, 55, 168, 47, 377, 42, 413, 28, 470, 51, 456, 64, 226, 17, 266, 30, 214, 37, 47, 42, 211, 57, 255, 50, 284, 35, 443, 19, 338, 48, 469, 34, 40, 18, 473, 28, 401, 48, 61, 20, 172, 38, 497, 59, 466, 20, 39, 35, 143, 31, 569, 42, 268, 41, 428, 49, 237, 43, 226, 61, 568, 22, 79, 20, 475, 45, 161, 43, 355, 57, 457, 29, 163, 26, 107, 24, 185, 34, 477, 24, 20, 65, 264, 26, 313, 42, 337, 58, 295, 60, 497, 50, 50, 54, 156, 20, 47, 20, 160, 40, 531, 53, 491, 59, 445, 46, 571, 31, 402, 49, 335, 25, 395, 49, 370, 38, 513, 41, 166, 19, 216, 65, 391, 19, 196, 63, 75, 62, 205, 54, 367, 24, 396, 39, 458, 61, 553, 17, 510, 15, 267, 64, 253, 38, 230, 16, 562, 57, 471, 57, 188, 38, 400, 24, 525, 51, 137, 35, 284, 34, 138, 64, 324, 28, 197, 63, 105, 48, 139, 49, 330, 21, 106, 16, 356, 65, 73, 44, 424, 44, 56, 30, 276, 40, 184, 59, 208, 64, 336, 63, 388, 46, 473, 55, 352, 30, 396, 25, 74, 18, 36, 56, 321, 35, 266, 33, 349, 27, 190, 29, 539, 35, 419, 56, 54, 37, 346, 64, 457, 56, 374, 44, 296, 56, 177, 37, 458, 49, 434, 40, 126, 49, 354, 36, 361, 44, 292, 50, 27, 30, 155, 42, 43, 26, 523, 24, 457, 20, 454, 37, 516, 35, 516, 63, 184, 50, 446, 34, 230, 49, 84, 42, 218, 31, 518, 38, 206, 38, 298, 44, 417, 23, 528, 44, 144, 25, 378, 25, 295, 63, 211, 29, 556, 60, 274, 17, 250, 48, 321, 41, 119, 32, 582, 31, 299, 41, 161, 56, 167, 15, 206, 41, 181, 32, 161, 54, 53, 31, 17, 43, 177, 23, 579, 49, 400, 26, 391, 36, 378, 41, 17, 60, 450, 17, 60, 31, 242, 43, 222, 56, 98, 19, 413, 30, 511, 41, 421, 54, 126, 23, 181, 53, 316, 21, 190, 59, 210, 17, 482, 21, 292, 26, 217, 64, 63, 33, 184, 19, 127, 53, 77, 38, 260, 54, 66, 37, 44, 61, 205, 20, 53, 33, 491, 17, 251, 28, 475, 49, 541, 20, 142, 35, 521, 40, 201, 54, 282, 56, 135, 32, 200, 37, 370, 24, 507, 37, 576, 31, 116, 45, 253, 27, 567, 38, 566, 20, 326, 54, 299, 50, 556, 63, 584, 32, 295, 38, 111, 43, 199, 22, 40, 60, 158, 18, 61, 51, 585, 16, 505, 62, 16, 34, 290, 57, 319, 64, 282, 57, 222, 23, 363, 61, 324, 50, 135, 58, 502, 38, 381, 24, 106, 51, 265, 26, 573, 64, 513, 51, 439, 62, 142, 19, 94, 54, 446, 56, 33, 44, 129, 23, 442, 22, 67, 30, 252, 51, 530, 15, 403, 46, 47, 22, 129, 22, 488, 43, 113, 39, 229, 32, 239, 42, 203, 30, 271, 59, 413, 17, 433, 55, 270, 47, 424, 23, 235, 37, 41, 38, 337, 60, 166, 45, 474, 40, 403, 34, 404, 52, 379, 49, 282, 61, 521, 30, 190, 17, 66, 21, 215, 41, 386, 56, 490, 27, 164, 58, 34, 33, 264, 36, 394, 46, 23, 44, 470, 35, 17, 60, 374, 30, 454, 21, 383, 51, 339, 24, 180, 63, 578, 45, 182, 29, 401, 52, 165, 64, 90, 28, 49, 37, 22, 45, 126, 20, 413, 37, 275, 61, 462, 47, 510, 64, 323, 41, 362, 56, 393, 31, 120, 31, 409, 28, 74, 32, 228, 16, 290, 34, 513, 60, 578, 63, 432, 18, 554, 32, 136, 60, 330, 38, 543, 53, 531, 44, 534, 37, 320, 24, 45, 21, 115, 28, 441, 27, 118, 40, 248, 30, 430, 42, 563, 33, 517, 51, 153, 32, 39, 64, 155, 36, 163, 30, 174, 57, 432, 63, 313, 41, 136, 40, 73, 20, 456, 39, 221, 36, 241, 15, 413, 63, 146, 64, 41, 33, 68, 54, 205, 37, 132, 54, 568, 19, 427, 43, 244, 37, 118, 33, 110, 21, 535, 56, 376, 43, 15, 26, 290, 44, 546, 44, 433, 22, 92, 63, 392, 33, 460, 18, 453, 15, 58, 55, 89, 64, 581, 18, 368, 61, 304, 17, 525, 58, 380, 27, 557, 51, 340, 33, 373, 17, 557, 52, 248, 37, 214, 46, 557, 57, 193, 19, 553, 51, 467, 56, 175, 19, 339, 52, 477, 51, 200, 44, 277, 55, 566, 36, 475, 59, 44, 32, 299, 58, 71, 26, 55, 40, 336, 21, 31, 46, 323, 58, 379, 28, 133, 56, 400, 46, 522, 34, 111, 26, 25, 52, 481, 40, 282, 54, 583, 33, 167, 64, 444, 54, 155, 30, 405, 16, 254, 37, 376, 20, 185, 64, 513, 17, 20, 46, 353, 38, 338, 63, 135, 16, 565, 61, 455, 59, 559, 23, 219, 39, 571, 54, 341, 59, 266, 35, 444, 54, 252, 62, 362, 49, 47, 27, 230, 27, 219, 53, 420, 48, 143, 26, 533, 18, 130, 62, 544, 40, 240, 65, 66, 59, 371, 57, 263, 57, 69, 42, 206, 46, 301, 42, 449, 36, 426, 52, 29, 15, 177, 61, 491, 58, 537, 17, 84, 51, 18, 44, 351, 23, 61, 29, 442, 61, 56, 47, 289, 25, 93, 22, 482, 58, 124, 60, 199, 54, 347, 24, 173, 58, 543, 55, 164, 62, 176, 46, 457, 17, 398, 35, 308, 41, 124, 27, 434, 22, 84, 24, 18, 49, 117, 21, 171, 38, 449, 56, 269, 22, 520, 46, 243, 61, 112, 21, 504, 50, 466, 62, 537, 45, 96, 20, 481, 20, 195, 52, 333, 39, 98, 15, 316, 24, 123, 37, 193, 39, 268, 33, 157, 41, 86, 27, 280, 29, 537, 48, 30, 49, 185, 22, 257, 38, 197, 20, 173, 31, 126, 61, 338, 46, 57, 64, 378, 19, 100, 35, 275, 16, 379, 30, 541, 53, 69, 37, 356, 46, 507, 37, 155, 26, 518, 43, 435, 45, 423, 34, 336, 27, 461, 25, 257, 21, 400, 56, 417, 27, 574, 54, 129, 55, 40, 49, 442, 54, 385, 45, 28, 27, 430, 17, 67, 44, 520, 42, 506, 30, 362, 43, 173, 33, 58, 54, 199, 59, 239, 48, 491, 29, 435, 48, 259, 29, 577, 59, 417, 46, 185, 26, 131, 56, 376, 20, 445, 32, 560, 42, 568, 38, 124, 40, 264, 50, 78, 58, 253, 23, 498, 19, 260, 23, 167, 61, 157, 20, 297, 32, 136, 43, 573, 23, 547, 31, 565, 44, 577, 44, 409, 54, 448, 54, 65, 56, 580, 31, 118, 23, 67, 40, 98, 18, 212, 29, 275, 41, 517, 63, 159, 29, 70, 47, 575, 16, 300, 49, 24, 57, 265, 56, 572, 17, 511, 54, 302, 41, 346, 64, 531, 34, 160, 23, 441, 59, 224, 61, 23, 49, 369, 30, 449, 38, 161, 25, 471, 37, 447, 41, 20, 24, 367, 61, 119, 61, 305, 61, 167, 64, 349, 35, 498, 44, 53, 64, 447, 31, 345, 36, 162, 62, 277, 43, 35, 52, 372, 52, 559, 17, 419, 39, 186, 15, 462, 33, 414, 65, 66, 26, 352, 45, 265, 53, 240, 22, 396, 31, 582, 39, 525, 48, 63, 46, 315, 23, 21, 25, 545, 38, 345, 50, 265, 53, 122, 55, 417, 35, 37, 18, 459, 54, 366, 20, 313, 27, 129, 24, 193, 51, 495, 15, 156, 18, 495, 43, 566, 17, 140, 60, 339, 56, 526, 54, 396, 48, 350, 19, 115, 62, 410, 58, 247, 26, 288, 46, 98, 20, 463, 37, 364, 33, 505, 23, 552, 36, 39, 15, 282, 48, 348, 25, 519, 33, 329, 21, 491, 28, 70, 44, 535, 64, 343, 17, 280, 19, 364, 53, 339, 58, 68, 36, 162, 32, 269, 21, 144, 32, 383, 64, 528, 20, 108, 34, 312, 58, 127, 32, 526, 17, 98, 25, 478, 18, 541, 31, 42, 16, 473, 45, 570, 23, 124, 58, 488, 58, 203, 46, 38, 65, 34, 20, 428, 16, 223, 18, 340, 54, 534, 47, 206, 49, 186, 24, 253, 40, 131, 53, 197, 30, 99, 35, 545, 32, 336, 33, 395, 55, 261, 43, 207, 53, 20, 22, 131, 33, 187, 42, 518, 18, 238, 32, 415, 61, 559, 23, 238, 44, 133, 49, 294, 45, 447, 32, 512, 26, 64, 23, 163, 23, 91, 44, 382, 30, 198, 55, 352, 38, 312, 33, 495, 45, 87, 44, 119, 53, 101, 46, 140, 55, 150, 54, 400, 24, 162, 35, 129, 44, 496, 35, 458, 18, 202, 36, 572, 62, 56, 34, 441, 45, 233, 18, 559, 26, 50, 28, 140, 41, 389, 50, 208, 47, 50, 54, 188, 29, 179, 45, 582, 34, 57, 15, 161, 40, 308, 47, 80, 61, 462, 60, 391, 53, 208, 33, 429, 24, 425, 57, 338, 37, 299, 15, 337, 52, 153, 55, 259, 24, 439, 43, 474, 41, 34, 32, 561, 50, 19, 18, 32, 50, 549, 41, 423, 52, 86, 57, 157, 32, 504, 25, 548, 38, 409, 47, 558, 41, 124, 62, 408, 49, 227, 21, 337, 21, 266, 22, 56, 53, 452, 56, 374, 28, 149, 46, 359, 39, 145, 52, 71, 22, 29, 34, 212, 28, 341, 22, 247, 37, 409, 36, 18, 30, 434, 52, 222, 35, 381, 21, 192, 29, 348, 17, 113, 44, 282, 24, 388, 44, 335, 39, 187, 35, 24, 56, 219, 44, 243, 41, 536, 36, 300, 15, 385, 59, 147, 20, 200, 56, 79, 37, 543, 56, 429, 22, 122, 43, 319, 56, 348, 59, 206, 17, 503, 49, 402, 32, 27, 21, 385, 42, 421, 56, 238, 41, 126, 48, 218, 47, 101, 18, 226, 23, 78, 25, 396, 34, 158, 65, 57, 48, 305, 31, 98, 15, 560, 56, 206, 42, 423, 19, 449, 31, 527, 40, 439, 61, 272, 15, 507, 61, 37, 47, 518, 35, 100, 65, 480, 47, 575, 49, 18, 54, 444, 24, 244, 65, 322, 40, 212, 51, 184, 60, 544, 64, 525, 37, 332, 64, 554, 19, 101, 29, 544, 19, 506, 15, 480, 54, 220, 41, 228, 33, 451, 36, 563, 53, 320, 29, 162, 53, 402, 49, 136, 42, 563, 16, 57, 26, 237, 15, 308, 56, 558, 35, 345, 54, 529, 39, 348, 25, 401, 31, 413, 50, 73, 62, 474, 60, 117, 15, 162, 62, 52, 40, 450, 29, 156, 30, 349, 39, 80, 57, 381, 19, 22, 28, 48, 37, 180, 47, 284, 18, 446, 32, 580, 57, 567, 43, 483, 35, 386, 27, 567, 61, 264, 26, 277, 35, 480, 40, 118, 37, 455, 42, 228, 27, 115, 48, 114, 16, 482, 51, 482, 37, 287, 38, 274, 62, 498, 47, 391, 57, 25, 51, 35, 24, 189, 26, 234, 31, 134, 38, 195, 53, 218, 32, 170, 49, 570, 32, 277, 36, 486, 22, 275, 34, 213, 26, 196, 31, 392, 36, 82, 49, 223, 45, 60, 35, 192, 63, 53, 28, 505, 27, 581, 60, 23, 18, 244, 35, 30, 44, 504, 34, 145, 39, 252, 21, 407, 40, 191, 47, 502, 56, 129, 16, 327, 44, 512, 48, 521, 56, 237, 43, 126, 62, 565, 34, 281, 41, 211, 15, 164, 23, 229, 30, 427, 57, 299, 61, 453, 18, 364, 57, 447, 44, 159, 59, 331, 45, 16, 47, 461, 62, 396, 17, 575, 15, 375, 25, 270, 26, 33, 46, 550, 23, 508, 32, 323, 21, 406, 59, 470, 39, 370, 62, 501, 42, 256, 47, 63, 40, 83, 21, 479, 33, 585, 54, 582, 40, 100, 48, 57, 58, 15, 18, 45, 25, 582, 64, 98, 62, 398, 22, 294, 29, 477, 41, 132, 24, 318, 52, 90, 24, 226, 39, 405, 55, 148, 52, 211, 31, 428, 38, 60, 59, 174, 41, 56, 43, 105, 16, 42, 52, 388, 55, 333, 53, 147, 20, 77, 58, 97, 58, 176, 32, 319, 55, 109, 38, 441, 24, 156, 33, 373, 58, 397, 46, 20, 39, 189, 16, 337, 46, 215, 28, 357, 43, 132, 63, 162, 65, 209, 43, 412, 21, 119, 48, 62, 41, 271, 43, 439, 49, 23, 55, 570, 47, 64, 55, 424, 56, 387, 37, 80, 22, 378, 18, 415, 16, 193, 63, 355, 38, 362, 57, 339, 15, 557, 56, 528, 19, 491, 21, 167, 37, 274, 52, 116, 45, 197, 32, 572, 59, 244, 44, 406, 40, 379, 53, 154, 20, 358, 23, 546, 20, 442, 49, 425, 40, 432, 60, 38, 48, 439, 28, 283, 47, 75, 47, 31, 58, 402, 61, 330, 54, 181, 63, 292, 47, 86, 61, 53, 16, 494, 15, 209, 35, 310, 15, 489, 26, 558, 31, 189, 24, 186, 51, 225, 55, 84, 45, 78, 42, 486, 55, 430, 35, 366, 62, 581, 50, 486, 50, 559, 60, 560, 21, 115, 64, 505, 55, 251, 38, 163, 23, 82, 59, 92, 16, 207, 63, 444, 32, 174, 26, 368, 30, 61, 39, 389, 37, 353, 64, 447, 30, 330, 16, 152, 60, 62, 19, 48, 15, 56, 58, 205, 20, 224, 64, 514, 19, 557, 64, 68, 60, 306, 25, 287, 63, 152, 64, 98, 61, 37, 49, 174, 20, 83, 45, 207, 60, 304, 62, 566, 58, 133, 36, 281, 42, 485, 21, 39, 42, 517, 27, 221, 32, 78, 58, 56, 30, 191, 43, 317, 55, 137, 29, 454, 55, 202, 19, 40, 16, 324, 52, 42, 33, 452, 26, 180, 19, 469, 50, 126, 18, 100, 19, 489, 48, 177, 16, 32, 56, 171, 30, 507, 52, 482, 17, 577, 41, 121, 15, 394, 41, 413, 27, 97, 25, 441, 38, 455, 32, 459, 44, 328, 50, 35, 32, 280, 27, 77, 49, 293, 38, 464, 47, 131, 22, 497, 54, 317, 47, 385, 16, 398, 62, 180, 23, 456, 30, 290, 40, 230, 42, 261, 59, 264, 20, 98, 56, 557, 15, 84, 34, 396, 64, 568, 46, 155, 60, 522, 25, 306, 49, 299, 48, 146, 59, 261, 43, 98, 38, 530, 28, 166, 34, 86, 62]
else: # CYCLE_IN_SECONDS == 3600
    if PATTERN==1:
        random_numbers
    else:
        #50% uniformely distributed and 50% in 15 - 315
        random_numbers

CONFERENCES = 0
if CYCLE_IN_SECONDS==600:
    CONFERENCES=50
    #CONFERENCES=150
else:
    #CONFERENCES = 300
    CONFERENCES = 900



INICI_CONF=[] # Fixe per tota la simulacio, de llargaria numero de videoconf. en un cycle (i amb valors de 0 a CYCLE_IN_SECONDS)
for index_i in range(CONFERENCES): # anem a omplir de moltes videoconf.
    index_pos_conf = random_numbers.pop()
    INICI_CONF.append(index_pos_conf)




class User:
    def __init__(self,type_user,duration,id):
        self.type = type_user # 1 o 2, els 1's fan augmentar la cpu un 1% i els 2 un 5%
        self.duration = duration # same for all participants of same conference, in seconds
        self.id = id

    def advance_round(self):
        self.duration= self.duration - 1

class JVB:
    def __init__(self):
        self.users_connected = []
        self.cpu_load = None
        self.up = False

    def is_up(self):
        return self.up

    def start(self):
        self.cpu_load = 0
        self.up = True

    def close(self):
        self.users_connected = []
        self.cpu_load = None
        self.up = False

    def add_user(self,user):

        if self.up:
            self.users_connected.append(user)
            if user.type == 1:
                self.cpu_load = self.cpu_load + CPU_TYPE_1
            else:
                self.cpu_load = self.cpu_load + CPU_TYPE_2
            return 1
        return 0

    def advance_round(self):
        for user in reversed(self.users_connected):
            user.advance_round()
            if user.duration == 0:
                self.users_connected.remove(user)
                if user.type==1:
                    self.cpu_load = self.cpu_load - CPU_TYPE_1
                else:
                    self.cpu_load = self.cpu_load - CPU_TYPE_2

class Jitsi:
    def __init__(self):

        self.video_bridges = []
        for i in range(MAX_JBS):
            self.video_bridges.append(JVB())

        self.video_bridges[0].start() # always 1 up...
        self.video_bridges_up = 1

        self.flag_up = 0
        self.flag_down = 0
        self.counter_flag = 0

        #self.highest_mean_cpu = 100

    def start_jvb_flag(self):

        if self.video_bridges_up < MAX_JBS:
            self.flag_up= 1
            self.counter_flag = 15
            return 1
        return 0

    def stop_jvb_flag(self):

        if self.video_bridges_up > 1:
            self.flag_down = 1
            self.counter_flag = 15
            return 1
        return 0

    def start_jvb(self):

        self.flag_up = 0
        self.get_some_jvb_down().start()
        self.video_bridges_up += 1

    def stop_jvb(self):

        self.flag_down = 0
        jvb_selected = self.get_least_loaded_jvb()
        users_to_reallocate = jvb_selected.users_connected
        jvb_selected.close()
        self.video_bridges_up -= 1

        for user in users_to_reallocate:
            jvb_selected = self.get_least_loaded_jvb()
            jvb_selected.add_user(user)

    def add_user_jitsi(self,user):
        jvb_selected = self.get_least_loaded_jvb()
        jvb_selected.add_user(user)

    def advance_round(self):

        for jvb in self.video_bridges:
            if jvb.is_up():
                jvb.advance_round()

        if self.flag_up == 1 and self.flag_down == 1:
            print("Whaaaat")

        if self.flag_up==1 or self.flag_down == 1:
            self.counter_flag = self.counter_flag -1
            if self.counter_flag ==0:
                if self.flag_up == 1:
                    self.start_jvb()
                else:
                    self.stop_jvb()

    def get_users_connected(self):

        num_users=0
        for jvb in self.video_bridges:
            num_users= num_users + len(jvb.users_connected)

        return num_users

    def get_state(self):

        state = [self.video_bridges_up, ROUND_COUNTER, self.get_mean_cpu()]

        return state

    def get_mean_cpu(self):

        total_cpu = 0

        for jvb in self.video_bridges:
            if jvb.is_up():
                total_cpu = total_cpu + jvb.cpu_load

        #if (total_cpu>150):
        #    print(total_cpu/self.video_bridges_up)

        return total_cpu/self.video_bridges_up

    def get_least_loaded_jvb(self):

        jvb_selected = None
        cpu_min = 10000

        for jvb in self.video_bridges:

            if jvb.is_up():

                if jvb.cpu_load <= cpu_min:
                    cpu_min = jvb.cpu_load
                    jvb_selected = jvb

        return jvb_selected

    def get_most_loaded_jvb(self):

        jvb_selected = None
        cpu_max = 0

        for jvb in self.video_bridges:

            if jvb.is_up():

                if jvb.cpu_load >= cpu_max:
                    cpu_max = jvb.cpu_load
                    jvb_selected = jvb

        return jvb_selected

    def get_some_jvb_down(self):

        jvb_down = None

        for jvb in self.video_bridges:
            if not jvb.is_up():
                jvb_down = jvb
                break

        return jvb_down



class TBM_solution:
    def __init__(self,t_up,t_down,price):
        self.t_up =t_up
        self.t_down = t_down
        self.price = price



class Autoscaler:

    def __init__(self,jitsi,threshold_up, threshold_down):
        self.jitsi = jitsi
        self.threshold_up = threshold_up
        self.threshold_down = threshold_down

    def perform_action(self,jitsi_state):

        if jitsi_state[2] <= self.threshold_down:
            action_performed = self.jitsi.stop_jvb_flag()
            if action_performed==1:
                advance_rounds(self.jitsi, 20)
            return -1
        elif jitsi_state[2] >= self.threshold_up:
            action_performed = self.jitsi.start_jvb_flag()
            if action_performed==1:
                advance_rounds(self.jitsi, 20)
            return 1
        return 0

class AutoscalerRL:

    def __init__(self,jitsi,policy):
        self.jitsi = jitsi
        self.policy = policy

    def perform_action(self,jitsi_state):
        # It returns the action as well
        coor = get_coordinates_state(jitsi_state)

        if self.policy[coor[0]][coor[1]][coor[2]] == 1:
            action_performed = self.jitsi.start_jvb_flag()
            if action_performed == 1:
                advance_rounds(self.jitsi, 20)
                #pass
            return 1
        elif self.policy[coor[0]][coor[1]][coor[2]] == -1:
            action_performed = self.jitsi.stop_jvb_flag()
            if action_performed == 1:
                advance_rounds(self.jitsi, 20)
                #pass
            return -1
        return 0

    def set_policy(self,policy):
        self.policy= policy

class NoAutoscaler:
    def __init__(self,jitsi):
        self.jitsi = jitsi

    def perform_action(self,jitsi_state):
        return 0

class YesAutoscaler:
    def __init__(self,jitsi):
        self.jitsi = jitsi

    def perform_action(self,jitsi_state):
        action_performed = self.jitsi.start_jvb_flag()
        if action_performed == 1:
            advance_rounds(self.jitsi, 20)
        return 1




def new_users(jitsi):
    global ID_USER

    list_of_users_to_connect = horari[ROUND_COUNTER]
    if list_of_users_to_connect is not None:
        for con_user in list_of_users_to_connect:
            jitsi.add_user_jitsi(User(con_user[0], con_user[1], ID_USER))
            ID_USER = ID_USER + 1

def update_price(jitsi):
    global TOTAL_PRICE

    TOTAL_PRICE = TOTAL_PRICE + PRICE_JB_S * jitsi.video_bridges_up

    mean_cpu = jitsi.get_mean_cpu()

    if mean_cpu >= CPU_LOAD_SLA:
        TOTAL_PRICE = TOTAL_PRICE + PRICE_SLA_S * (1 + (mean_cpu - CPU_LOAD_SLA) / CPU_LOAD_SLA)

def advance_rounds(jitsi,rounds):
    global ROUND_COUNTER
    global TOTAL_ROUND_COUNTER

    for i in range(rounds):

        # Start of the round:
        new_users(jitsi)
        update_price(jitsi)

        ##
        ## ROUND HAPPENING...
        ##

        # End of the round:
        jitsi.advance_round()

        TOTAL_ROUND_COUNTER = TOTAL_ROUND_COUNTER + 1
        ROUND_COUNTER = ROUND_COUNTER + 1
        if ROUND_COUNTER == CYCLE_IN_SECONDS:
            ROUND_COUNTER=0
            populate_timetable()

def test_autoscaler(type_autoscaler,policy, t_up, t_down):

    global ROUND_COUNTER, TOTAL_ROUND_COUNTER, TOTAL_PRICE, ID_USER, TOTAL_EXP

    ROUND_COUNTER = 0  # in seconds
    TOTAL_ROUND_COUNTER = 0  # in seconds
    TOTAL_PRICE = 0  # in euros
    ID_USER = 0

    populate_timetable()

    #for i in horari:
    #    print(i)

    jitsi = Jitsi()
    autoscaler = None

    if type_autoscaler==1:
        threshold_up= t_up
        threshold_down= t_down
        autoscaler = Autoscaler(jitsi,threshold_up,threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))

    elif type_autoscaler==2:
        autoscaler = NoAutoscaler(jitsi)

    elif type_autoscaler==3:
        autoscaler = AutoscalerRL(jitsi,policy)

    elif type_autoscaler==4:
        autoscaler = YesAutoscaler(jitsi)




    while TOTAL_ROUND_COUNTER < 604800:

        state = jitsi.get_state()
        autoscaler.perform_action(state)
        advance_rounds(jitsi, PHOTO_INTERVAL)




    if type_autoscaler==3:
        print("\n" + str(round(TOTAL_PRICE, 2)) + " Euros \n")
        TOTAL_EXP = TOTAL_EXP + round(TOTAL_PRICE, 2)


    return round(TOTAL_PRICE, 2)

           



def add_conference(temps_x,pos_x,tipus_x):
    # Conf 1.
    for i in range(tipus_x[0]):

        plus = round(np.random.normal(0, 3, 1)[0])

        if plus > 10 or plus < -10:
            plus = 0

        pos = int(pos_x + plus)
        if horari[pos] == None:
            horari[pos] = [[1, temps_x]]
        else:
            horari[pos].append([1, temps_x])

    for i in range(tipus_x[1]):

        plus = round(np.random.normal(0, 3, 1)[0])

        if plus > 10 or plus < -10:
            plus = 0

        pos = int(pos_x + plus)
        if horari[pos] == None:
            horari[pos] = [[2, temps_x]]
        else:
            horari[pos].append([2, temps_x])

def populate_timetable():
    global horari

    horari = [None] * CYCLE_IN_SECONDS
    # MAXIM QUE PUGUI CARREGAR 150! 15*6 = 90 users
    # Enregistrar aquestes dades de Jitsi realment...
    for pos_conf in INICI_CONF:
        # temps_x = randint(60, 120)
        temps_x = round(np.random.normal(DURACIO_VID, 10, 1)[0])
        if temps_x < DURACIO_VID_MIN or temps_x > DURACIO_VID_MAX:
            temps_x = DURACIO_VID
        pos_x = pos_conf
        tipus_x = [5, 1] # 5 de tipus 1 i 1 de tipus 2 = 6

        add_conference(temps_x, pos_x, tipus_x)




def get_closest(number,to,type):

    if number is None:
        return None

    number_decimal = float(number) / to
    number_rounded = round(number_decimal)
    number_final = int(number_rounded * to)

    if type==1:
        if number_final == CYCLE_IN_SECONDS:
            number_final=0

    if type==2:
        if number_final == MAX_CPU:
            number_final=0

    return number_final

    """
    while 1:
        if number % 10 == 0:
            break
        else:
            number = number-1

    return number
    """

def compute_reward_state(state):

    cost = (state[0]*PRICE_JB_S) * PHOTO_INTERVAL

    if state[2]>=CPU_LOAD_SLA:
        cost = cost + (1 + (state[2]-CPU_LOAD_SLA)/CPU_LOAD_SLA)*PRICE_SLA_S * PHOTO_INTERVAL

    return - cost

def get_coordinates_state(jitsi_state):

    coordernada_x = jitsi_state[0] - 1
    coordernada_y = int(get_closest(jitsi_state[1],QUANTIZATION_TIME,1) / QUANTIZATION_TIME)
    coordernada_z = int(get_closest(jitsi_state[2],QUANTIZATION_CPU,2) / QUANTIZATION_CPU)

    return [coordernada_x,coordernada_y,coordernada_z]




def get_num_action_2(action):
    if(action==-1):
        return 0
    if(action==0):
        return 1
    if(action==1):
        return 2

def get_action_2(action_num):
    if(action_num==0):
        return -1
    if(action_num==1):
        return 0
    if(action_num==2):
        return 1

def argmax_a_2(Q,state):
    coor = get_coordinates_state(state)

    best_action = get_action_2(0)
    best_q = Q[0][coor[0]][coor[1]][coor[2]]

    if Q[1][coor[0]][coor[1]][coor[2]] > best_q:
        best_action = get_action_2(1)
        best_q = Q[1][coor[0]][coor[1]][coor[2]]

    if Q[2][coor[0]][coor[1]][coor[2]] > best_q:
        best_action = get_action_2(2)
        best_q = Q[2][coor[0]][coor[1]][coor[2]]

    return best_action

def max_a_2(Q,state):
    coor = get_coordinates_state(state)

    best_q = Q[0][coor[0]][coor[1]][coor[2]]

    if Q[1][coor[0]][coor[1]][coor[2]] > best_q:
        best_q = Q[1][coor[0]][coor[1]][coor[2]]

    if Q[2][coor[0]][coor[1]][coor[2]] > best_q:
        best_q = Q[2][coor[0]][coor[1]][coor[2]]

    return best_q





def set_policy_respect_to_Q(Q, volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu):

    policy_actual = np.zeros((volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu))

    for i in range(volum_dimensio_number_jitsi):
        for j in range(volum_dimensio_temps):
            for k in range(volum_dimensio_cpu):
                policy_actual[i][j][k] = argmax_a_2(Q, [i,j*QUANTIZATION_TIME,k*QUANTIZATION_CPU])

    return policy_actual




def main2():

    global ROUND_COUNTER, TOTAL_ROUND_COUNTER, TOTAL_PRICE, ID_USER, TOTAL_EXP

    option_selected = "1"

    for num_experiments in range(NUM_EXP):

        print("##########################################")
        print("##########################################")
        print("EXPERIMENT NUMBER " + str(num_experiments))
        print("##########################################")
        print("##########################################")


        if option_selected == "1" and False:
            if num_experiments == 0:
                thresholds_up = [65,60,55,50,45,40,35,30,25,20,15,10,5]
                thresholds_down = [65,60,55,50,45,40,35,30,25,20,15,10,5]

                all_tbm = []
                best_tbm = []

                for i in thresholds_up:
                    for j in thresholds_down:
                        if i>=j:
                            price_obtained = test_autoscaler(1, None, i, j)
                            all_tbm.append(TBM_solution(i,j,price_obtained))

                for i in range(4):
                    best=1000000
                    best_elem = None

                    for elem in all_tbm:
                        if elem.price<best:
                            best= elem.price
                            best_elem = elem
                    all_tbm.remove(best_elem)
                    best_tbm.append(best_elem)
                    print("["+str(best_elem.t_up) + "-" + str(best_elem.t_down) + "]: "+str(best_elem.price))


        if option_selected == "1":
            if num_experiments == 0:
                test_autoscaler(2, None, None, None)


        if option_selected == "1":

            ROUND_COUNTER = 0  # in seconds
            TOTAL_ROUND_COUNTER = 0  # in seconds
            TOTAL_PRICE = 0  # in euros
            ID_USER = 0

            populate_timetable()

            volum_dimensio_number_jitsi = int(MAX_JBS)
            #volum_dimensio_temps = int(CYCLE_IN_SECONDS / QUANTIZATION_TIME + 1)
            #volum_dimensio_cpu = int(4000 / QUANTIZATION_CPU + 1) # 400 or bigger...
            volum_dimensio_temps = int(CYCLE_IN_SECONDS / QUANTIZATION_TIME)
            volum_dimensio_cpu = int(MAX_CPU / QUANTIZATION_CPU)

            Q = np.zeros((3, volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu))
            policy_actual = np.zeros((volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu))

            jitsi = Jitsi()
            autoscaler = AutoscalerRL(jitsi,policy_actual)


            EPSILON = 1.00
            number_of_iterations = int(sys.argv[2])
            DECAYING_EPSILON = 1.0/number_of_iterations

            print("Q.TIME: " + str(QUANTIZATION_TIME))
            print("Q.CPU: " + str(QUANTIZATION_CPU))
            print("ALPHA: " + str(ALPHA))
            print("ITERATIONS: " + str(number_of_iterations))
            print("CYCLE: "+ str(CYCLE_IN_SECONDS))
            print("PATTERN: " + str(PATTERN))
            #"""

            current_state = jitsi.get_state()

            for t in range(number_of_iterations):

                print_wait_info(t, number_of_iterations)

                # (s,a,r,s')
                action = autoscaler.perform_action(current_state)
                reward = compute_reward_state(current_state)  # afegir cost si obres o tanques? R(s,a)
                advance_rounds(jitsi, PHOTO_INTERVAL)
                next_state = jitsi.get_state()

                coor = get_coordinates_state(current_state)
                Q_t_minus_1 = Q[get_num_action_2(action)][coor[0]][coor[1]][coor[2]]

                #if t%(number_of_iterations/10)== 0 and t!=0:
                #    ALPHA= ALPHA/2

                Q[get_num_action_2(action)][coor[0]][coor[1]][coor[2]] = Q_t_minus_1 + ALPHA * (reward + GAMMA * max_a_2(Q, next_state) - Q_t_minus_1)

                policy_actual[coor[0]][coor[1]][coor[2]] = argmax_a_2(Q, current_state)
                random_int = randint(0, 99)
                if random_int < int(EPSILON * 100):
                    policy_actual[coor[0]][coor[1]][coor[2]] = get_action_2(randint(0, 2))

                autoscaler.set_policy(policy_actual)

                #EPSILON = EPSILON - DECAYING_EPSILON
                #EPSILON = 1/(t+1)
                #"""
                if t == int(number_of_iterations/10):
                    EPSILON = 0.5
                elif t == 2*int(number_of_iterations/10):
                    EPSILON = 0.4
                elif t == 3*int(number_of_iterations/10):
                    EPSILON = 0.3
                elif t == 4*int(number_of_iterations/10):
                    EPSILON = 0.2
                elif t == 5*int(number_of_iterations/10):
                    EPSILON = 0.1
                elif t == 6*int(number_of_iterations/10):
                    EPSILON = 0.05
                elif t == 7*int(number_of_iterations/10):
                    EPSILON = 0.01
                elif t == 8*int(number_of_iterations/10):
                    EPSILON = 0.005
                elif t == 9*int(number_of_iterations/10):
                    EPSILON = 0.001
                #"""


                current_state = next_state


            test_autoscaler(3,policy_actual, None, None)


        if option_selected == "1":
            if num_experiments==0:
                test_autoscaler(4, None, None, None)


    print()
    print()
    print("Mitja RL: " + str(TOTAL_EXP / NUM_EXP))
    print()
    print()





















def find_state(x,y,states):

    result = None

    for s in states:
        if s.x==x and s.y==y:
            result = s

    return result

def compute_cost(x,y):
    return (pow(x - OPTIMAL_X, 2) + pow(y - OPTIMAL_Y, 2))

def compute_reward(x,y,action):

    desired_x =x
    desired_y =y

    if action=='N':
        desired_y = desired_y + 1
    elif action=='S':
        desired_y = desired_y - 1
    elif action == 'W':
        desired_x = desired_x - 1
    elif action == 'E':
        desired_x = desired_x + 1
    elif action == '·':
        pass

    reward = 0.0

    if (0 <= desired_x and desired_x <= X_SIZE - 1 and 0 <= desired_y and desired_y <= Y_SIZE - 1):
        if action!='·':
            reward =  (compute_cost(x,y) - compute_cost(desired_x,desired_y)) - COST_STEP
    else:
        reward = -COST_STEP


    return reward

def get_nice_policy(states):
    policy = [None]*NUM_STATES

    for x in range(0,int((X_SIZE/2))):
        for y in range(Y_SIZE):
            policy[x + y*Y_SIZE] = 'S'

    for x in range(X_SIZE):
        for y in range(0,int((Y_SIZE/2))):
            policy[x + y * Y_SIZE] = 'E'

    for x in range(int((X_SIZE/2))+1,X_SIZE):
        for y in range(Y_SIZE):
            policy[x + y*Y_SIZE] = 'N'

    for x in range(int((X_SIZE/2)),X_SIZE):
        for y in range(int((Y_SIZE/2)+1),Y_SIZE):
            policy[x + y * Y_SIZE] = 'W'

    for x in range(X_SIZE):
        for y in range(Y_SIZE):
            if policy[x + y * Y_SIZE] == None:
                if states[x + y * Y_SIZE].end==False:
                    policy[x + y * Y_SIZE] = '·'



    return policy

def get_random_policy(states):

    policy= []

    for x in range(X_SIZE):
        for y in range(Y_SIZE):

            if(find_state(x,y,states).end==False):


                rand_dir = randint(0, 4)
                if rand_dir==0:
                    policy.append('N')
                if rand_dir==1:
                    policy.append('S')
                if rand_dir==2:
                    policy.append('W')
                if rand_dir==3:
                    policy.append('E')
                if rand_dir==4:
                    policy.append('·')




            else:
                policy.append(None)

    return policy

def get_fixed_random_policy(states):
    return ['S', 'N', 'S', '·', '·', 'N', 'S', '·', 'W', 'E', '·', 'S', '·', 'W', 'W', 'S', 'S', 'S', 'E', '·', 'E', 'E', 'W', '·', 'S', 'S', 'W', 'N', 'E', '·', 'N', '·', 'E', 'S', 'W', 'S', '·', 'N', 'W', '·', 'N', 'S', 'S', 'W', '·', 'S', '·', 'S', 'E']

def print_V(V):
    for i in range(X_SIZE):
        for j in range(Y_SIZE):
            print(str(i) + " " + str(j) + ": " + str(V[i + j * Y_SIZE]))

def print_policy(policy):
    print()
    for y in range(Y_SIZE - 1, -1, -1):
        for x in range(X_SIZE):

            if policy[x + y * Y_SIZE] != None:
                print(policy[x + y * Y_SIZE], end=" ")
            else:
                print(" ", end=" ")
        print()
    print()

def get_random_state(states):
    random_state = find_state(randint(0, X_SIZE - 1), randint(0, Y_SIZE - 1), states)
    while random_state.end == True:
        random_state = find_state(randint(0, X_SIZE - 1), randint(0, Y_SIZE - 1), states)
    return random_state

def print_wait_info(loop,number_of_iterations):
    if (loop % (number_of_iterations / 10) == 0 and loop != 0):
        print("|", end=' ')
        sys.stdout.flush()

def get_num_action(action):
    if(action=='N'):
        return 0
    if(action=='S'):
        return 1
    if(action=='W'):
        return 2
    if(action=='E'):
        return 3
    if(action=='·'):
        return 4

def get_action(action_num):
    if(action_num==0):
        return 'N'
    if(action_num==1):
        return 'S'
    if(action_num==2):
        return 'W'
    if(action_num==3):
        return 'E'
    if(action_num==4):
        return '·'

def argmax_a(Q,state):

    best_action = get_action(0)
    best_q = Q[0][state.x + state.y * Y_SIZE]

    if Q[1][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(1)
        best_q = Q[1][state.x + state.y * Y_SIZE]

    if Q[2][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(2)
        best_q = Q[2][state.x + state.y * Y_SIZE]

    if Q[3][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(3)
        best_q = Q[3][state.x + state.y * Y_SIZE]

    if Q[4][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(4)
        best_q = Q[4][state.x + state.y * Y_SIZE]

    return best_action

def max_a(Q,state):

    best_action = get_action(0)
    best_q = Q[0][state.x + state.y * Y_SIZE]

    if Q[1][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(1)
        best_q = Q[1][state.x + state.y * Y_SIZE]

    if Q[2][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(2)
        best_q = Q[2][state.x + state.y * Y_SIZE]

    if Q[3][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(3)
        best_q = Q[3][state.x + state.y * Y_SIZE]

    if Q[4][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(4)
        best_q = Q[4][state.x + state.y * Y_SIZE]

    return best_q



if __name__ == '__main__':
    main2()