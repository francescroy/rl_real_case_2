

import numpy as np
from random import *
import math
import time
import sys
import matplotlib.pyplot as plt

X_SIZE =7 # 5,7,9
Y_SIZE =7 # 5,7,9
NUM_STATES = X_SIZE * Y_SIZE
GAMMA = 0.90
OPTIMAL_X, OPTIMAL_Y = 3,3 # 2,3,4
OPTIMAL_FINAL_STATE = False # Can be false if using TD-learning or DP methods but must be true if some MonteCarlo method...
COST_STEP = 0.10
NUM_ACTIONS = 5

ROUND_COUNTER = 0 # in seconds
TOTAL_ROUND_COUNTER = 0 # in seconds
TOTAL_PRICE = 0 # in euros
ID_USER = 0

CPU_TYPE_1 = 1
CPU_TYPE_2 = 5
MAX_JBS = 10 # (5 or 10 default)
PRICE_JB_S = 0.000025 # 0.000025 default :0.09$ la hora (based on real Amazon EC2...)
PRICE_SLA_S = 0.0025 # 0.0025 default :9$ la hora
CPU_LOAD_SLA = 70 # mean

CYCLE_IN_SECONDS = int(sys.argv[1]) # in seconds
PATTERN = int(sys.argv[3])
PHOTO_INTERVAL = 5 # in seconds (1 or 5 default)
DURACIO_VID = 120 # in seconds
DURACIO_VID_MIN = 110
DURACIO_VID_MAX = 130

ALPHA = 0.15
QUANTIZATION_TIME = 20 # default 10
QUANTIZATION_CPU = 20 # default 10
NUM_EXP = 10
TOTAL_EXP = 0

horari = [None] * CYCLE_IN_SECONDS # Al principi es una llista de None's.
                                   # Es regenera a cada cycle.
                                   # Cada element es o None o una list de mini-lists de 2...

# random numbers from 15 to CYCLE_IN_SECONDS - 15
random_numbers=[]
if CYCLE_IN_SECONDS == 600:
    if PATTERN==1:
        random_numbers = [119, 178, 159, 194, 355, 461, 554, 20, 552, 203, 428, 482, 570, 243, 426, 263, 463, 236, 20, 131, 37, 311, 223, 367, 120, 116, 375, 25, 162, 165, 267, 300, 419, 29, 543, 422, 261, 181, 336, 214, 279, 371, 355, 551, 471, 255, 331, 457, 284, 514, 374, 161, 134, 578, 150, 440, 492, 107, 181, 176, 576, 99, 41, 107, 156, 479, 101, 168, 461, 164, 148, 448, 367, 263, 535, 82, 483, 245, 502, 213, 368, 40, 65, 155, 275, 88, 431, 351, 48, 154, 19, 522, 252, 296, 414, 81, 447, 426, 376, 509, 570, 240, 208, 470, 584, 291, 101, 286, 467, 236, 571, 536, 268, 33, 562, 479, 50, 505, 370, 115, 282, 545, 85, 348, 557, 511, 37, 91, 434, 316, 419, 429, 170, 201, 199, 524, 318, 390, 126, 42, 96, 328, 332, 575, 111, 531, 152, 16, 503, 179, 284, 291, 158, 177, 21, 406, 504, 408, 236, 264, 71, 147, 130, 159, 476, 190, 382, 458, 156, 88, 88, 20, 45, 311, 36, 428, 228, 86, 349, 272, 187, 192, 405, 143, 561, 96, 64, 217, 482, 291, 457, 257, 334, 399, 420, 379, 77, 357, 138, 117, 259, 584, 140, 572, 334, 217, 366, 193, 283, 494, 546, 94, 402, 432, 87, 115, 48, 230, 177, 40, 531, 533, 584, 245, 521, 38, 64, 93, 136, 575, 430, 314, 379, 174, 186, 96, 179, 135, 181, 313, 500, 569, 129, 349, 215, 367, 466, 94, 276, 71, 341, 422, 179, 52, 263, 522, 472, 160, 271, 407, 261, 265, 173, 297, 403, 241, 383, 406, 70, 177, 542, 159, 25, 78, 361, 458, 136, 310, 73, 104, 493, 158, 521, 80, 469, 408, 544, 373, 314, 573, 210, 264, 105, 259, 558, 316, 262, 486, 498, 448, 49, 338, 243, 245, 333, 113, 519, 541, 556, 105, 483, 120, 133, 206, 519, 383, 523, 207, 86, 489, 456, 358, 470, 369, 168, 223, 131, 247, 130, 338, 274, 247, 192, 177, 476, 332, 540, 180, 526, 182, 435, 507, 498, 302, 105, 25, 335, 137, 491, 74, 347, 331, 493, 34, 286, 255, 52, 133, 89, 374, 223, 57, 224, 312, 178, 541, 92, 565, 562, 411, 186, 266, 184, 322, 565, 254, 421, 378, 194, 301, 378, 253, 148, 282, 176, 112, 144, 46, 49, 218, 496, 273, 77, 304, 37, 228, 358, 38, 78, 191, 538, 134, 441, 323, 292, 399, 498, 131, 231, 576, 198, 42, 541, 572, 510, 158, 443, 320, 124, 142, 393, 551, 398, 578, 212, 371, 93, 356, 217, 93, 314, 52, 526, 113, 414, 157, 109, 100, 564, 260, 16, 577, 142, 580, 467, 109, 585, 277, 361, 356, 535, 233, 285, 274, 52, 17, 349, 74, 297, 247, 252, 219, 237, 555, 455, 110, 149, 394, 155, 248, 521, 211, 398, 419, 400, 240, 73, 256, 580, 312, 59, 378, 393, 23, 234, 143, 156, 61, 443, 358, 550, 406, 426, 207, 286, 414, 491, 129, 567, 263, 478, 81, 424, 279, 29, 147, 359, 355, 584, 500, 76, 278, 60, 492, 531, 324, 280, 501, 79, 446, 486, 150, 153, 307, 185, 530, 563, 474, 179, 431, 293, 530, 85, 115, 208, 480, 431, 547, 505, 383, 418, 345, 112, 198, 469, 465, 139, 202, 133, 237, 241, 266, 74, 246, 359, 585, 85, 219, 391, 350, 160, 215, 454, 144, 459, 446, 537, 36, 332, 157, 76, 189, 329, 133, 540, 147, 558, 182, 75, 250, 540, 99, 447, 61, 65, 403, 211, 113, 75, 94, 194, 441, 133, 237, 182, 437, 66, 317, 290, 556, 158, 490, 324, 137, 434, 374, 319, 468, 317, 196, 566, 171, 255, 329, 476, 240, 380, 484, 42, 305, 124, 479, 486, 50, 229, 257, 397, 254, 109, 371, 340, 243, 36, 57, 202, 509, 419, 415, 241, 421, 106, 380, 154, 87, 569, 171, 249, 571, 265, 556, 164, 458, 201, 463, 189, 359, 181, 547, 353, 325, 105, 528, 516, 563, 84, 316, 572, 206, 542, 415, 572, 277, 148, 357, 119, 181, 279, 238, 280, 449, 161, 86, 321, 287, 286, 34, 348, 463, 364, 319, 298, 479, 524, 285, 351, 178, 178, 164, 560, 252, 572, 178, 15, 541, 336, 259, 114, 451, 562, 39, 112, 207, 131, 233, 425, 325, 460, 16, 459, 169, 159, 378, 359, 202, 543, 186, 317, 460, 522, 422, 461, 490, 567, 542, 515, 357, 540, 579, 326, 282, 155, 418, 337, 398, 537, 274, 469, 444, 172, 556, 276, 522, 549, 550, 532, 217, 553, 32, 344, 87, 43, 143, 110, 75, 173, 90, 256, 396, 350, 207, 101, 372, 109, 332, 267, 469, 32, 364, 349, 90, 145, 259, 497, 184, 191, 429, 382, 109, 525, 16, 288, 431, 61, 555, 539, 315, 403, 146, 126, 259, 217, 427, 187, 276, 411, 418, 450, 437, 181, 307, 336, 489, 482, 289, 158, 20, 330, 235, 193, 110, 504, 59, 155, 401, 585, 189, 173, 282, 399, 352, 147, 180, 138, 422, 28, 113, 82, 530, 236, 458, 501, 220, 556, 318, 478, 533, 44, 298, 137, 228, 514, 510, 279, 127, 315, 136, 308, 264, 558, 194, 64, 62, 376, 174, 369, 256, 434, 487, 413, 217, 545, 113, 523, 366, 120, 379, 139, 168, 109, 331, 117, 237, 299, 221, 465, 218, 349, 545, 154, 444, 577, 98, 489, 497, 532, 111, 381, 184, 376, 498, 77, 329, 133, 296, 348, 55, 277, 155, 436, 165, 305, 133, 285, 478, 37, 464, 317, 80, 364, 209, 295, 111, 243, 252, 399, 566, 550, 525, 158, 193, 400, 76, 322, 346, 343, 265, 181, 386, 39, 197, 56, 127, 509, 28, 223, 197, 240, 33, 16, 272, 70, 551, 365, 272, 499, 416, 205, 480, 524, 27, 103, 396, 236, 413, 224, 326, 540, 111, 292, 357, 303, 308, 212, 512, 488, 476, 512, 46, 273, 22, 218, 119, 233, 332, 158, 394, 569, 306, 517, 108, 562, 439, 367, 429, 255, 499, 235, 368, 89, 64, 254, 40, 480, 225, 268, 104, 397, 102, 488, 241, 282, 393, 265, 357, 577, 266, 122, 343, 233, 248, 199, 177, 302, 249, 524, 186, 566, 131, 332, 488, 258, 419, 561, 238, 363, 458, 76, 144, 504, 65, 414, 343, 54, 318, 140, 291, 384, 570, 534, 490, 58, 150, 370, 421, 501, 118, 275, 461, 197, 41, 572, 372, 153, 506, 546, 182, 62, 283, 84, 431, 375, 97, 260, 152, 69, 36, 335, 132, 520, 145, 87, 306, 392, 265, 509, 519, 95, 437, 115, 207, 23, 151, 232, 523, 446, 135, 493, 228, 416, 584, 25, 20, 564, 138, 188, 387, 491, 107, 183, 141, 69, 420, 289, 162, 76, 438, 465, 419, 112, 494, 100, 489, 175, 67, 306, 541, 111, 43, 125, 87, 302, 398, 411, 384, 351, 515, 341, 575, 90, 323, 388, 528, 516, 133, 439, 285, 464, 69, 224, 487, 239, 352, 282, 131, 27, 255, 422, 181, 494, 156, 73, 47, 535, 109, 462, 432, 438, 396, 57, 153, 400, 94, 192, 47, 426, 142, 377, 277, 335, 223, 549, 568, 193, 104, 18, 319, 37, 191, 109, 162, 237, 330, 474, 548, 276, 248, 52, 107, 385, 109, 19, 196, 80, 103, 520, 340, 108, 143, 352, 172, 36, 114, 352, 254, 261, 484, 176, 55, 394, 431, 338, 203, 175, 110, 255, 221, 473, 215, 543, 149, 570, 295, 563, 548, 196, 213, 100, 434, 264, 408, 440, 327, 417, 379, 250, 21, 264, 169, 560, 356, 488, 550, 123, 364, 309, 371, 486, 374, 63, 133, 346, 20, 517, 565, 437, 123, 395, 570, 229, 219, 109, 424, 207, 108, 308, 432, 314, 440, 201, 409, 469, 202, 354, 138, 333, 584, 155, 61, 75, 315, 581, 89, 428, 249, 262, 106, 113, 210, 482, 154, 388, 551, 563, 323, 79, 319, 317, 549, 355, 137, 480, 439, 205, 436, 63, 261, 96, 109, 400, 481, 286, 267, 177, 371, 451, 268, 59, 93, 475, 106, 410, 185, 353, 204, 571, 430, 355, 90, 176, 541, 332, 435, 523, 376, 111, 196, 443, 420, 324, 485, 349, 422, 40, 260, 565, 148, 454, 295, 194, 427, 270, 36, 149, 482, 367, 284, 321, 124, 346, 121, 436, 219, 407, 292, 46, 348, 284, 241, 370, 143, 496, 289, 284, 359, 79, 172, 406, 314, 43, 432, 428, 59, 149, 133, 73, 125, 528, 208, 453, 474, 220, 193, 140, 227, 245, 131, 88, 190, 117, 550, 93, 566, 469, 140, 471, 309, 367, 106, 55, 119, 561, 583, 351, 530, 551, 62, 213, 386, 144, 259, 318, 286, 397, 379, 305, 583, 245, 335, 373, 53, 170, 331, 271, 352, 118, 470, 499, 158, 219, 415, 58, 119, 429, 414, 467, 532, 488, 300, 337, 369, 335, 66, 485, 242, 382, 190, 472, 179, 476, 487, 64, 393, 17, 95, 403, 87, 518, 176, 142, 457, 306, 200, 46, 82, 249, 323, 322, 503, 446, 473, 460, 564, 175, 456, 411, 297, 524, 256, 63, 394, 428, 164, 364, 299, 456, 289, 487, 279, 71, 429, 356, 32, 200, 228, 318, 483, 327, 432, 280, 156, 540, 418, 472, 178, 170, 189, 158, 110, 63, 527, 27, 283, 266, 389, 34, 227, 93, 188, 208, 376, 548, 445, 90, 201, 564, 300, 483, 310, 198, 138, 254, 433, 517, 24, 455, 273, 141, 337, 174, 349, 17, 435, 138, 334, 579, 520, 236, 269, 81, 219, 514, 69, 578, 32, 312, 396, 365, 535, 485, 123, 291, 471, 109, 516, 529, 71, 333, 352, 163, 438, 312, 67, 388, 439, 512, 82, 53, 126, 94, 214, 567, 579, 554, 68, 115, 483, 403, 209, 145, 178, 429, 284, 512, 75, 369, 146, 417, 383, 71, 260, 118, 169, 409, 49, 244, 119, 91, 153, 514, 399, 35, 330, 411, 311, 350, 18, 134, 79, 84, 565, 153, 554, 540, 489, 193, 469, 283, 122, 433, 581, 478, 290, 162, 473, 202, 362, 464, 81, 230, 266, 296, 125, 116, 99, 203, 500, 473, 273, 54, 62, 36, 68, 526, 570, 158, 400, 583, 416, 209, 280, 503, 247, 210, 413, 449, 264, 177, 562, 426, 43, 359, 357, 486, 572, 330, 422, 544, 229, 529, 373, 204, 448, 155, 347, 262, 228, 393, 170, 551, 491, 346, 120, 122, 117, 478, 158, 316, 532, 462, 348, 278, 553, 454, 312, 163, 531, 476, 441, 53, 266, 364, 460, 178, 67, 222, 104, 127, 474, 197, 480, 52, 210, 474, 23, 219, 328, 295, 316, 193, 45, 298, 56, 35, 290, 408, 132, 82, 155, 370, 508, 40, 177, 516, 126, 308, 177, 65, 303, 494, 301, 327, 564, 305, 219, 261, 542, 271, 93, 583, 175, 56, 32, 579, 367, 492, 527, 174, 546, 338, 529, 247, 340, 410, 570, 188, 281, 120, 139, 85, 66, 231, 99, 99, 56, 59, 152, 335, 147, 523, 553, 120, 113, 563, 503, 406, 189, 290, 62, 426, 111, 26, 117, 141, 277, 93, 74, 181, 375, 500, 488, 361, 343, 406, 360, 546, 83, 204, 117, 567, 550, 315, 98, 454, 311, 552, 96, 501, 244, 509, 544, 425, 498, 41, 167, 440, 27, 532, 220, 266, 214, 541, 339, 38, 186, 323, 287, 157, 262, 21, 219, 246, 29, 182, 87, 545, 341, 403, 390, 239, 43, 202, 534, 547, 238, 201, 159, 435, 234, 294, 427, 129, 573, 50, 341, 67, 43, 287, 41, 151, 387, 425, 94, 142, 461, 323, 271, 441, 579, 348, 152, 195, 268, 576, 299, 394, 566, 212, 145, 54, 28, 275, 259, 55, 529, 116, 515, 435, 252, 69, 261, 257, 570, 169, 180, 274, 38, 286, 80, 519, 61, 461, 493, 517, 23, 19, 54, 388, 362, 222, 91, 373, 87, 201, 266, 236, 98, 236, 299, 533, 566, 396, 32, 305, 200, 257, 475, 544, 582, 134, 218, 108, 489, 378, 133, 462, 487, 343, 416, 473, 377, 454, 550, 300, 158, 98, 206, 524, 561, 512, 289, 213, 174, 298, 466, 421, 31, 153, 108, 526, 309, 140, 200, 529, 113, 161, 439, 154, 101, 241, 210, 44, 189, 362, 535, 319, 551, 52, 215, 199, 365, 206, 271, 76, 311, 107, 568, 143, 518, 355, 148, 117, 542, 225, 206, 427, 150, 528, 67, 545, 557, 276, 441, 571, 327, 24, 53, 179, 184, 212, 515, 455, 564, 488, 235, 333, 72, 34, 202, 275, 438, 270, 332, 269, 526, 408, 511, 19, 275, 310, 158, 278, 206, 81, 15, 38, 280, 548, 558, 307, 480, 556, 342, 30, 310, 107, 137, 309, 167, 332, 333, 160, 494, 466, 284, 351, 171, 237, 474, 468, 71, 307, 183, 532, 549, 429, 464, 226, 382, 503, 547, 523, 26, 217, 160, 36, 427, 471, 450, 100, 222, 433, 495, 278, 154, 121, 19, 380, 532, 56, 275, 134, 178, 143, 142, 267, 233, 569, 501, 394, 513, 325, 218, 397, 560, 485, 78, 390, 194, 240, 547, 255, 90, 461, 498, 489, 192, 552, 365, 73, 309, 262, 124, 523, 506, 193, 581, 551, 410, 231, 360, 337, 279, 141, 257, 437, 553, 72, 257, 363, 543, 529, 575, 535, 188, 202, 247, 554, 273, 380, 232, 317, 40, 59, 369, 397, 415, 511, 552, 133, 20, 332, 398, 403, 353, 97, 346, 383, 56, 249, 556, 204, 39, 338, 578, 561, 192, 370, 197, 244, 348, 516, 283, 324, 150, 83, 219, 19, 451, 151, 464, 497, 240, 141, 413, 318, 366, 91, 505, 94, 434, 181, 347, 488, 325, 102, 166, 496, 403, 426, 389, 354, 475, 393, 228, 26, 393, 317, 574, 461, 432, 190, 472, 470, 489, 98, 446, 17, 400, 292, 364, 174, 584, 504, 348, 399, 507, 467, 507, 341, 407, 242, 530, 68, 55, 155, 201, 166, 168, 258, 418, 361, 320, 197, 388, 319, 485, 33, 26, 474, 144, 299, 28, 261, 468, 161, 565, 342, 218, 156, 389, 261, 216, 374, 302, 136, 419, 85, 274, 71, 107, 27, 387, 199, 195, 486, 100, 470, 582, 489, 234, 227, 413, 219, 341, 244, 572, 392, 550, 467, 200, 94, 511, 146, 216, 280, 439, 583, 388, 85, 105, 43, 57, 350, 352, 445, 94, 213, 520, 58, 43, 414, 304, 405, 353, 264, 509, 97, 158, 284, 500, 260, 113, 441, 179, 231, 231, 132, 103, 261, 320, 148, 379, 530, 148, 130, 57, 388, 268, 444, 289, 519, 160, 577, 574, 18, 412, 45, 492, 340, 152, 280, 73, 412, 72, 310, 53, 412, 438, 469, 338, 503, 352, 399, 482, 346, 231, 58, 263, 561, 565, 463, 575, 511, 442, 442, 372, 426, 575, 47, 162, 336, 465, 340, 224, 477, 25, 407, 402, 36, 404, 517, 566, 393, 364, 26, 444, 169, 447, 267, 529, 512, 145, 285, 221, 92, 247, 352, 270, 354, 241, 100, 176, 522, 122, 412, 269, 56, 123, 531, 123, 510, 545, 559, 418, 205, 135, 489, 475, 40, 289, 205, 249, 135, 470, 133, 82, 132, 369, 35, 220, 219, 121, 502, 252, 495, 222, 138, 164, 311, 93, 371, 406, 472, 267, 169, 399, 493, 512, 188, 429, 505, 529, 481, 180, 291, 542, 85, 40, 93, 248, 494, 288, 136, 37, 214, 361, 137, 438, 465, 139, 325, 190, 205, 50, 297, 549, 126, 165, 475, 453, 226, 172, 154, 21, 99, 264, 16, 395, 321, 105, 279, 366, 391, 182, 408, 217, 429, 383, 237, 452, 375, 153, 94, 31, 485, 428, 485, 226, 126, 328, 306, 187, 229, 108, 316, 89, 218, 520, 89, 428, 442, 524, 441, 186, 134, 121, 247, 22, 448, 169, 200, 289, 330, 566, 504, 444, 551, 585, 184, 269, 533, 449, 496, 494, 507, 23, 214, 112, 492, 410, 91, 194, 432, 520, 118, 160, 81, 513, 562, 165, 204, 379, 441, 311, 18, 567, 240, 282, 69, 533, 574, 443, 418, 102, 37, 281, 257, 500, 58, 100, 450, 428, 468, 505, 456, 356, 138, 228, 425, 235, 222, 225, 557, 48, 87, 238, 578, 16, 295, 276, 195, 103, 157, 234, 328, 244, 439, 244, 335, 124, 309, 182, 315, 539, 571, 334, 258, 212, 359, 215, 349, 120, 346, 302, 382, 438, 57, 327, 472, 142, 195, 563, 253, 204, 119, 494, 68, 380, 265, 33, 55, 227, 391, 492, 280, 390, 120, 52, 258, 260, 584, 408, 221, 62, 69, 375, 264, 30, 460, 368, 355, 503, 92, 421, 200, 344, 324, 45, 544, 96, 59, 86, 468, 446, 433, 410, 365, 166, 42, 357, 368, 99, 118, 201, 569, 177, 149, 554, 164, 160, 533, 431, 80, 367, 196, 101, 565, 527, 147, 355, 131, 270, 438, 413, 118, 462, 121, 290, 292, 223, 371, 285, 281, 200, 428, 429, 31, 400, 513, 475, 114, 529, 507, 516, 89, 307, 474, 454, 387, 475, 181, 64, 189, 76, 162, 96, 505, 517, 32, 104, 224, 438, 520, 240, 305, 425, 487, 56, 472, 281, 470, 154, 475, 350, 455, 444, 463, 444, 205, 489, 127, 145, 429, 453, 503, 16, 327, 410, 122, 354, 549, 387, 56, 414, 384, 267, 16, 353, 542, 374, 486, 481, 152, 342, 164, 544, 220, 163, 98, 151, 516, 203, 295, 45, 414, 79, 200, 247, 25, 423, 80, 220, 81, 266, 573, 293, 534, 583, 141, 418, 429, 290, 391, 564, 519, 15, 398, 266, 146, 291, 473, 207, 201, 534, 348, 313, 50, 157, 582, 416, 547, 467, 243, 207, 462, 432, 543, 499, 408, 78, 326, 203, 165, 491, 173, 540, 271, 469, 201, 96, 384, 48, 431, 458, 438, 287, 203, 161, 255, 347, 170, 385, 243, 307, 254, 174, 116, 547, 333, 380, 193, 565, 556, 127, 539, 430, 50, 76, 397, 69, 330, 149, 129, 272, 131, 298, 425, 488, 338, 391, 305, 298, 122, 521, 447, 253, 276, 115, 90, 77, 373, 118, 45, 557, 509, 422, 24, 219, 175, 395, 540, 109, 81, 536, 47, 254, 117, 561, 277, 471, 38, 555, 136, 191, 568, 203, 343, 120, 291, 307, 148, 234, 18, 174, 243, 122, 292, 56, 393, 407, 497, 347, 69, 171, 406, 301, 100, 176, 454, 391, 501, 283, 187, 103, 86, 537, 136, 429, 355, 410, 380, 28, 423, 562, 151, 154, 539, 224, 450, 142, 153, 91, 373, 98, 442, 171, 168, 326, 288, 310, 69, 348, 130, 89, 513, 233, 452, 475, 187, 41, 402, 441, 314, 305, 305, 34, 122, 58, 367, 82, 137, 123, 489, 501, 116, 216, 434, 311, 408, 296, 392, 183, 550, 36, 276, 22, 524, 73, 186, 308, 366, 454, 245, 434, 322, 246, 437, 423, 127, 83, 528, 170, 174, 157, 197, 98, 472, 39, 287, 356, 252, 18, 248, 243, 35, 42, 257, 351, 507, 154, 203, 382, 177, 463, 60, 147, 184, 510, 92, 129, 434, 345, 542, 472, 114, 490, 392, 209, 294, 369, 366, 341, 509, 236, 159, 452, 325, 137, 416, 483, 209, 314, 285, 381, 442, 182, 526, 274, 377, 466, 408, 240, 448, 268, 199, 164, 88, 518, 580, 286, 153, 291, 565, 291, 400, 64, 513, 105, 72, 350, 104, 549, 302, 410, 141, 349, 224, 570, 191, 280, 340, 585, 47, 496, 173, 95, 206, 335, 388, 373, 154, 29, 484, 34, 184, 142, 86, 296, 208, 430, 192, 572, 250, 265, 439, 420, 366, 410, 392, 153, 116, 293, 320, 473, 323, 180, 68, 533, 101, 543, 53, 459, 363, 72, 460, 76, 332, 80, 83, 347, 546, 172, 101, 108, 253, 70, 86, 522, 224, 423, 359, 250, 582, 361, 82, 284, 179, 435, 94, 312, 513, 244, 287, 255, 328, 540, 189, 41, 238, 78, 329, 104, 523, 211, 579, 445, 552, 395, 294, 396, 437, 69, 208, 337, 156, 69, 36, 49, 271, 32, 405, 395, 215, 555, 216, 491, 546, 542, 94, 175, 576, 126, 477, 338, 338, 535, 86, 190, 244, 101, 173, 443, 386, 179, 530, 314, 91, 46, 390, 212, 187, 572, 227, 281, 24, 234, 181, 54, 72, 56, 339, 307, 335, 146, 282, 282, 346, 266, 578, 506, 304, 161, 312, 135, 454, 302, 288, 116, 35, 261, 206, 23, 536, 478, 116, 145, 407, 28, 296, 435, 253, 573, 75, 17, 286, 60, 269, 483, 101, 471, 505, 305, 537, 576, 242, 424, 345, 549, 250, 350, 205, 217, 359, 185, 561, 576, 503, 491, 387, 475, 472, 163, 382, 300, 523, 274, 286, 193, 477, 324, 341, 405, 293, 150, 33, 388, 502, 140, 299, 46, 339, 353, 532, 528, 551, 42, 278, 204, 542, 194, 351, 156, 372, 30, 368, 531, 444, 130, 539, 371, 200, 415, 197, 476, 463, 336, 582, 25, 380, 210, 479, 433, 464, 432, 49, 61, 554, 503, 384, 420, 191, 422, 260, 285, 496, 133, 280, 241, 470, 462, 413, 221, 246, 137, 110, 172, 468, 544, 421, 235, 451, 290, 396, 130, 249, 309, 422, 521, 180, 74, 356, 304, 484, 187, 521, 388, 168, 276, 101, 308, 184, 540, 232, 129, 368, 585, 97, 17, 459, 52, 83, 416, 268, 412, 363, 391, 398, 549, 107, 533, 390, 255, 549, 434, 533, 385, 375, 44, 175, 257, 29, 140, 168, 90, 298, 572, 532, 41, 310, 154, 413, 353, 332, 288, 114, 406, 193, 503, 349, 261, 333, 391, 144, 82, 195, 514, 241, 154, 308, 332, 521, 375, 261, 490, 97, 211, 436, 165, 528, 474, 538, 438, 168, 403, 100, 264, 336, 299, 182, 58, 209, 247, 221, 373, 301, 59, 129, 141, 326, 227, 519, 267, 222, 69, 233, 551, 427, 61, 23, 315, 177, 184, 360, 459, 281, 29, 308, 15, 418, 524, 90, 41, 514, 264, 325, 547, 443, 62, 396, 577, 460, 241, 216, 362, 155, 167, 437, 420, 153, 163, 544, 532, 127, 145, 378, 167, 365, 40, 22, 84, 111, 262, 550, 331, 384, 231, 28, 85, 160, 22, 289, 341, 307, 475, 88, 116, 525, 247, 438, 534, 59, 328, 373, 165, 584, 237, 546, 525, 91, 456, 550, 32, 374, 578, 283, 348, 327, 167, 489, 278, 97, 67, 405, 552, 415, 264, 414, 271, 95, 288, 251, 195, 34, 570, 103, 416, 125, 474, 181, 573, 273, 47, 418, 555, 260, 227, 530, 537, 41, 362, 19, 110, 216, 257, 249, 239, 262, 357, 539, 367, 233, 427, 443, 401, 30, 408, 163, 161, 457, 373, 179, 40, 128, 365, 347, 571, 18, 35, 335, 580, 568, 184, 102, 204, 557, 18, 133, 564, 341, 289, 281, 103, 445, 290, 563, 29, 487, 571, 95, 364, 243, 117, 373, 573, 137, 542, 561, 46, 198, 174, 25, 127, 312, 219, 481, 483, 317, 580, 176, 181, 491, 561, 348, 189, 278, 513, 235, 392, 398, 553, 522, 543, 209, 161, 197, 434, 274, 472, 153, 351, 121, 131, 571, 168, 553, 502, 302, 115, 464, 581, 275, 447, 460, 334, 557, 114, 195, 331, 20, 468, 86, 446, 80, 33, 97, 109, 467, 192, 164, 235, 553, 434, 381, 539, 533, 306, 187, 457, 148, 370, 397, 296, 231, 68, 223, 64, 84, 571, 170, 481, 45, 424, 506, 498, 358, 403, 558, 468, 430, 449, 308, 117, 57, 190, 507, 323, 121, 135, 463, 231, 150, 133, 38, 336, 69, 414, 204, 38, 192, 58, 97, 373, 451, 61, 64, 302, 148, 452, 66, 348, 176, 40, 388, 347, 261, 40, 389, 223, 235, 542, 15, 202, 162, 528, 95, 167, 556, 288, 423, 306, 526, 389, 152, 263, 292, 134, 544, 576, 350, 425, 488, 138, 225, 338, 391, 186, 144, 121, 380, 358, 136, 376, 226, 257, 364, 305, 403, 151, 149, 451, 494, 240, 231, 501, 423, 184, 21, 148, 131, 432, 167, 386, 351, 451, 560, 30, 157, 307, 37, 182, 457, 358, 44, 84, 413, 301, 266, 357, 165, 92, 28, 225, 503, 115, 387, 263, 302, 112, 446, 466, 45, 206, 543, 126, 246, 207, 528, 470, 319, 140, 319, 247, 457, 539, 198, 550, 285, 35, 336, 519, 17, 175, 149, 527, 357, 235, 349, 544, 382, 508, 154, 354, 165, 283, 474, 262, 225, 295, 273, 143]
    else:
        #25 uniformely distributed and 25 in 15 - 115
        random_numbers = [206, 91, 231, 321, 392, 325, 451, 347, 389, 104, 185, 497, 450, 473, 203, 404, 536, 301, 278, 131, 579, 323, 148, 567, 252, 111, 51, 34, 29, 109, 45, 19, 44, 73, 43, 95, 52, 96, 32, 48, 93, 34, 23, 79, 20, 15, 103, 21, 44, 100]
else: # CYCLE_IN_SECONDS == 3600
    if PATTERN==1:
        random_numbers
    else:
        # 150 uniformely distributed and 150 in 15 - 115
        random_numbers = [3018, 523, 911, 3562, 2630, 778, 1166, 2316, 1083, 587, 352, 2863, 706, 3302, 1433, 881, 2645, 20, 1572, 1238, 1388, 107, 1146, 844, 3125, 973, 642, 2152, 1661, 986, 2944, 2388, 740, 1651, 2821, 1539, 1556, 1752, 1230, 3024, 1898, 3228, 1421, 2413, 2383, 2251, 1397, 417, 2271, 2348, 3034, 1528, 2258, 3269, 2926, 2105, 2056, 685, 2040, 2762, 2599, 1199, 2788, 927, 15, 1278, 2056, 151, 2279, 478, 945, 1776, 1236, 2012, 2526, 356, 2766, 208, 2778, 2283, 2660, 2855, 2256, 3422, 1829, 2599, 1983, 2314, 3008, 282, 2525, 3409, 2635, 1206, 1678, 1221, 390, 763, 2623, 3479, 941, 3180, 1819, 887, 302, 3507, 2510, 1192, 2089, 3351, 2634, 373, 264, 2884, 2033, 1692, 1936, 1270, 1835, 1576, 1787, 1452, 1123, 1216, 1071, 2534, 2110, 506, 2501, 2466, 2721, 175, 3411, 181, 275, 847, 422, 2522, 2662, 2177, 1311, 102, 1649, 3062, 3050, 1850, 1293, 3504, 2145, 1932, 113, 15, 57, 22, 61, 18, 57, 31, 98, 70, 96, 18, 101, 49, 61, 87, 84, 22, 48, 19, 67, 73, 76, 39, 94, 90, 96, 30, 16, 20, 42, 81, 99, 78, 59, 51, 16, 58, 20, 32, 31, 24, 92, 76, 19, 73, 51, 27, 36, 113, 43, 114, 98, 114, 23, 91, 67, 53, 71, 16, 107, 63, 18, 85, 109, 113, 68, 48, 83, 53, 65, 61, 100, 41, 55, 93, 51, 47, 30, 62, 42, 79, 110, 20, 22, 76, 54, 84, 86, 109, 25, 80, 108, 59, 46, 21, 65, 15, 89, 22, 87, 71, 21, 26, 113, 82, 95, 97, 85, 95, 45, 104, 109, 81, 112, 113, 53, 45, 98, 44, 99, 113, 72, 107, 109, 108, 64, 105, 70, 103, 17, 93, 49, 106, 32, 38, 97, 41, 54, 46, 54, 53, 73, 63, 28, 73, 112, 50, 85, 18]

CONFERENCES = 0
if CYCLE_IN_SECONDS==600:
    CONFERENCES=50
else:
    CONFERENCES = 300




INICI_CONF=[] # Fixe per tota la simulacio, de llargaria numero de videoconf. en un cycle (i amb valors de 0 a CYCLE_IN_SECONDS)
for index_i in range(CONFERENCES): # anem a omplir de moltes videoconf.
    index_pos_conf = random_numbers.pop()
    INICI_CONF.append(index_pos_conf)




class User:
    def __init__(self,type_user,duration,id):
        self.type = type_user # 1 o 2, els 1's fan augmentar la cpu un 1% i els 2 un 5%
        self.duration = duration # same for all participants of same conference, in seconds
        self.id = id

    def advance_round(self):
        self.duration= self.duration - 1

class JVB:
    def __init__(self):
        self.users_connected = []
        self.cpu_load = None
        self.up = False

    def is_up(self):
        return self.up

    def start(self):
        self.cpu_load = 0
        self.up = True

    def close(self):
        self.users_connected = []
        self.cpu_load = None
        self.up = False

    def add_user(self,user):

        if self.up:
            self.users_connected.append(user)
            if user.type == 1:
                self.cpu_load = self.cpu_load + CPU_TYPE_1
            else:
                self.cpu_load = self.cpu_load + CPU_TYPE_2
            return 1
        return 0

    def advance_round(self):
        for user in reversed(self.users_connected):
            user.advance_round()
            if user.duration == 0:
                self.users_connected.remove(user)
                if user.type==1:
                    self.cpu_load = self.cpu_load - CPU_TYPE_1
                else:
                    self.cpu_load = self.cpu_load - CPU_TYPE_2

class Jitsi:
    def __init__(self):

        self.video_bridges = []
        for i in range(MAX_JBS):
            self.video_bridges.append(JVB())

        self.video_bridges[0].start() # always 1 up...
        self.video_bridges_up = 1

        self.flag_up = 0
        self.flag_down = 0
        self.counter_flag = 0

        #self.highest_mean_cpu = 100

    def start_jvb_flag(self):

        if self.video_bridges_up < MAX_JBS:
            self.flag_up= 1
            self.counter_flag = 15
            return 1
        return 0

    def stop_jvb_flag(self):

        if self.video_bridges_up > 1:
            self.flag_down = 1
            self.counter_flag = 15
            return 1
        return 0

    def start_jvb(self):

        self.flag_up = 0
        self.get_some_jvb_down().start()
        self.video_bridges_up += 1

    def stop_jvb(self):

        self.flag_down = 0
        jvb_selected = self.get_least_loaded_jvb()
        users_to_reallocate = jvb_selected.users_connected
        jvb_selected.close()
        self.video_bridges_up -= 1

        for user in users_to_reallocate:
            jvb_selected = self.get_least_loaded_jvb()
            jvb_selected.add_user(user)

    def add_user_jitsi(self,user):
        jvb_selected = self.get_least_loaded_jvb()
        jvb_selected.add_user(user)

    def advance_round(self):

        for jvb in self.video_bridges:
            if jvb.is_up():
                jvb.advance_round()

        if self.flag_up == 1 and self.flag_down == 1:
            print("Whaaaat")

        if self.flag_up==1 or self.flag_down == 1:
            self.counter_flag = self.counter_flag -1
            if self.counter_flag ==0:
                if self.flag_up == 1:
                    self.start_jvb()
                else:
                    self.stop_jvb()

    def get_users_connected(self):

        num_users=0
        for jvb in self.video_bridges:
            num_users= num_users + len(jvb.users_connected)

        return num_users

    def get_state(self):

        state = [self.video_bridges_up, ROUND_COUNTER, self.get_mean_cpu()]

        return state

    def get_mean_cpu(self):

        total_cpu = 0

        for jvb in self.video_bridges:
            if jvb.is_up():
                total_cpu = total_cpu + jvb.cpu_load

        #if (total_cpu>150):
        #    print(total_cpu/self.video_bridges_up)

        return total_cpu/self.video_bridges_up

    def get_least_loaded_jvb(self):

        jvb_selected = None
        cpu_min = 10000

        for jvb in self.video_bridges:

            if jvb.is_up():

                if jvb.cpu_load <= cpu_min:
                    cpu_min = jvb.cpu_load
                    jvb_selected = jvb

        return jvb_selected

    def get_most_loaded_jvb(self):

        jvb_selected = None
        cpu_max = 0

        for jvb in self.video_bridges:

            if jvb.is_up():

                if jvb.cpu_load >= cpu_max:
                    cpu_max = jvb.cpu_load
                    jvb_selected = jvb

        return jvb_selected

    def get_some_jvb_down(self):

        jvb_down = None

        for jvb in self.video_bridges:
            if not jvb.is_up():
                jvb_down = jvb
                break

        return jvb_down





class Autoscaler:

    def __init__(self,jitsi,threshold_up, threshold_down):
        self.jitsi = jitsi
        self.threshold_up = threshold_up
        self.threshold_down = threshold_down

    def perform_action(self,jitsi_state):

        if jitsi_state[2] <= self.threshold_down:
            action_performed = self.jitsi.stop_jvb_flag()
            if action_performed==1:
                advance_rounds(self.jitsi, 20)
            return -1
        elif jitsi_state[2] >= self.threshold_up:
            action_performed = self.jitsi.start_jvb_flag()
            if action_performed==1:
                advance_rounds(self.jitsi, 20)
            return 1
        return 0

class AutoscalerRL:

    def __init__(self,jitsi,policy):
        self.jitsi = jitsi
        self.policy = policy

    def perform_action(self,jitsi_state):
        # It returns the action as well
        coor = get_coordinates_state(jitsi_state)

        if self.policy[coor[0]][coor[1]][coor[2]] == 1:
            action_performed = self.jitsi.start_jvb_flag()
            if action_performed == 1:
                advance_rounds(self.jitsi, 20)
                #pass
            return 1
        elif self.policy[coor[0]][coor[1]][coor[2]] == -1:
            action_performed = self.jitsi.stop_jvb_flag()
            if action_performed == 1:
                advance_rounds(self.jitsi, 20)
                #pass
            return -1
        return 0

    def set_policy(self,policy):
        self.policy= policy

class NoAutoscaler:
    def __init__(self,jitsi):
        self.jitsi = jitsi

    def perform_action(self,jitsi_state):
        return 0

class YesAutoscaler:
    def __init__(self,jitsi):
        self.jitsi = jitsi

    def perform_action(self,jitsi_state):
        action_performed = self.jitsi.start_jvb_flag()
        if action_performed == 1:
            advance_rounds(self.jitsi, 20)
        return 1




def new_users(jitsi):
    global ID_USER

    list_of_users_to_connect = horari[ROUND_COUNTER]
    if list_of_users_to_connect is not None:
        for con_user in list_of_users_to_connect:
            jitsi.add_user_jitsi(User(con_user[0], con_user[1], ID_USER))
            ID_USER = ID_USER + 1

def update_price(jitsi):
    global TOTAL_PRICE

    TOTAL_PRICE = TOTAL_PRICE + PRICE_JB_S * jitsi.video_bridges_up

    mean_cpu = jitsi.get_mean_cpu()

    if mean_cpu >= CPU_LOAD_SLA:
        TOTAL_PRICE = TOTAL_PRICE + PRICE_SLA_S * (1 + (mean_cpu - CPU_LOAD_SLA) / CPU_LOAD_SLA)

def advance_rounds(jitsi,rounds):
    global ROUND_COUNTER
    global TOTAL_ROUND_COUNTER

    for i in range(rounds):

        # Start of the round:
        new_users(jitsi)
        update_price(jitsi)

        ##
        ## ROUND HAPPENING...
        ##

        # End of the round:
        jitsi.advance_round()

        TOTAL_ROUND_COUNTER = TOTAL_ROUND_COUNTER + 1
        ROUND_COUNTER = ROUND_COUNTER + 1
        if ROUND_COUNTER == CYCLE_IN_SECONDS:
            ROUND_COUNTER=0
            populate_timetable()

def test_autoscaler(type_autoscaler,policy):

    global ROUND_COUNTER, TOTAL_ROUND_COUNTER, TOTAL_PRICE, ID_USER, TOTAL_EXP

    ROUND_COUNTER = 0  # in seconds
    TOTAL_ROUND_COUNTER = 0  # in seconds
    TOTAL_PRICE = 0  # in euros
    ID_USER = 0

    populate_timetable()

    jitsi = Jitsi()
    autoscaler = None

    if type_autoscaler==1:

        threshold_up= 50
        threshold_down= 10
        autoscaler = Autoscaler(jitsi,threshold_up,threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==2:

        threshold_up = 50
        threshold_down = 20
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==3:

        threshold_up = 50
        threshold_down = 30
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==4:

        threshold_up = 60
        threshold_down = 10
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==5:

        threshold_up = 60
        threshold_down = 20
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==6:

        threshold_up = 60
        threshold_down = 30
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==7:

        threshold_up = 40
        threshold_down = 10
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==8:
        autoscaler = NoAutoscaler(jitsi)
    elif type_autoscaler==9:
        autoscaler = AutoscalerRL(jitsi,policy)
    elif type_autoscaler==10:
        autoscaler = YesAutoscaler(jitsi)
    elif type_autoscaler==11:

        threshold_up = 40
        threshold_down = 20
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==12:

        threshold_up = 40
        threshold_down = 30
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))
    elif type_autoscaler==13:

        threshold_up = 40
        threshold_down = 30
        autoscaler = Autoscaler(jitsi, threshold_up, threshold_down)
        print(str(threshold_up) + "-" + str(threshold_down))



    while TOTAL_ROUND_COUNTER < 604800:

        state = jitsi.get_state()
        autoscaler.perform_action(state)
        advance_rounds(jitsi, PHOTO_INTERVAL)


    print()
    print(str(round(TOTAL_PRICE, 2)) + " Euros")
    if type_autoscaler==9:
        TOTAL_EXP = TOTAL_EXP + round(TOTAL_PRICE, 2)
    print()




def add_conference(temps_x,pos_x,tipus_x):
    # Conf 1.
    for i in range(tipus_x[0]):

        plus = round(np.random.normal(0, 3, 1)[0])

        if plus > 10 or plus < -10:
            plus = 0

        pos = int(pos_x + plus)
        if horari[pos] == None:
            horari[pos] = [[1, temps_x]]
        else:
            horari[pos].append([1, temps_x])

    for i in range(tipus_x[1]):

        plus = round(np.random.normal(0, 3, 1)[0])

        if plus > 10 or plus < -10:
            plus = 0

        pos = int(pos_x + plus)
        if horari[pos] == None:
            horari[pos] = [[2, temps_x]]
        else:
            horari[pos].append([2, temps_x])

def populate_timetable():
    global horari

    horari = [None] * CYCLE_IN_SECONDS
    # MAXIM QUE PUGUI CARREGAR 150! 15*6 = 90 users
    # Enregistrar aquestes dades de Jitsi realment...
    for pos_conf in INICI_CONF:
        # temps_x = randint(60, 120)
        temps_x = round(np.random.normal(DURACIO_VID, 10, 1)[0])
        if temps_x < DURACIO_VID_MIN or temps_x > DURACIO_VID_MAX:
            temps_x = DURACIO_VID
        pos_x = pos_conf
        tipus_x = [5, 1] # 5 de tipus 1 i 1 de tipus 2 = 6

        add_conference(temps_x, pos_x, tipus_x)




def get_closest(number,to):

    if number is None:
        return None

    number_decimal = float(number) / to
    number_rounded = round(number_decimal)
    number_final = int(number_rounded * to)

    return number_final

    """
    while 1:
        if number % 10 == 0:
            break
        else:
            number = number-1

    return number
    """

def compute_reward_state(state):

    cost = (state[0]*PRICE_JB_S) * PHOTO_INTERVAL

    if state[2]>=CPU_LOAD_SLA:
        cost = cost + (1 + (state[2]-CPU_LOAD_SLA)/CPU_LOAD_SLA)*PRICE_SLA_S * PHOTO_INTERVAL

    return - cost

def get_coordinates_state(jitsi_state):

    coordernada_x = jitsi_state[0] - 1
    coordernada_y = int(get_closest(jitsi_state[1],QUANTIZATION_TIME) / QUANTIZATION_TIME)
    coordernada_z = int(get_closest(jitsi_state[2],QUANTIZATION_CPU) / QUANTIZATION_CPU)

    return [coordernada_x,coordernada_y,coordernada_z]




def get_num_action_2(action):
    if(action==-1):
        return 0
    if(action==0):
        return 1
    if(action==1):
        return 2

def get_action_2(action_num):
    if(action_num==0):
        return -1
    if(action_num==1):
        return 0
    if(action_num==2):
        return 1

def argmax_a_2(Q,state):
    coor = get_coordinates_state(state)

    best_action = get_action_2(0)
    best_q = Q[0][coor[0]][coor[1]][coor[2]]

    if Q[1][coor[0]][coor[1]][coor[2]] > best_q:
        best_action = get_action_2(1)
        best_q = Q[1][coor[0]][coor[1]][coor[2]]

    if Q[2][coor[0]][coor[1]][coor[2]] > best_q:
        best_action = get_action_2(2)
        best_q = Q[2][coor[0]][coor[1]][coor[2]]

    return best_action

def max_a_2(Q,state):
    coor = get_coordinates_state(state)

    best_q = Q[0][coor[0]][coor[1]][coor[2]]

    if Q[1][coor[0]][coor[1]][coor[2]] > best_q:
        best_q = Q[1][coor[0]][coor[1]][coor[2]]

    if Q[2][coor[0]][coor[1]][coor[2]] > best_q:
        best_q = Q[2][coor[0]][coor[1]][coor[2]]

    return best_q





def main2():

    global ROUND_COUNTER, TOTAL_ROUND_COUNTER, TOTAL_PRICE, ID_USER, TOTAL_EXP

    print("What do you want to do?:")
    option_selected = "1"

    for num_experiments in range(NUM_EXP):

        print("##########################################")
        print("##########################################")
        print("EXPERIMENT NUMBER " + str(num_experiments))
        print("##########################################")
        print("##########################################")

        #"""
        if option_selected == "1":

            test_autoscaler(1, None)

        if option_selected == "1":

            test_autoscaler(2, None)

        if option_selected == "1":

            test_autoscaler(3, None)

        if option_selected == "1":

            test_autoscaler(4, None)

        if option_selected == "1":

            test_autoscaler(5, None)

        if option_selected == "1":

            test_autoscaler(6, None)

        if option_selected == "1":

            test_autoscaler(7, None)

        if option_selected == "1":

            test_autoscaler(8, None)
        #"""
        if option_selected == "1":

            ROUND_COUNTER = 0  # in seconds
            TOTAL_ROUND_COUNTER = 0  # in seconds
            TOTAL_PRICE = 0  # in euros
            ID_USER = 0

            populate_timetable()

            #"""
            volum_dimensio_number_jitsi = MAX_JBS
            volum_dimensio_temps = int(CYCLE_IN_SECONDS / QUANTIZATION_TIME + 1)
            volum_dimensio_cpu = int(4000 / QUANTIZATION_CPU + 1) # 400 or bigger...

            policy_actual = np.zeros((volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu))
            #"""

            jitsi = Jitsi()
            autoscaler = AutoscalerRL(jitsi,policy_actual)

            # Un estat seria algo com [1,15,43,None]
            # V_policy_actual(s) = un valor
            # V_policy_actual = dimensio de policy? Si
            # Q_policy_actual = mes gran que la dimensio de la policy

            #"""
            current_state = jitsi.get_state()
            Q = np.zeros((3, volum_dimensio_number_jitsi, volum_dimensio_temps, volum_dimensio_cpu))

            EPSILON = 1.00
            number_of_iterations = int(sys.argv[2])
            DECAYING_EPSILON = 1.0/number_of_iterations

            print("Q.TIME: " + str(QUANTIZATION_TIME))
            print("Q.CPU: " + str(QUANTIZATION_CPU))
            print("ALPHA: " + str(ALPHA))
            print("ITERATIONS: " + str(number_of_iterations))
            print("CYCLE: "+ str(CYCLE_IN_SECONDS))
            print("PATTERN: " + str(PATTERN))
            #"""

            for t in range(number_of_iterations):

                print_wait_info(t, number_of_iterations)

                # (s,a,r,s')
                action = autoscaler.perform_action(current_state)
                reward = compute_reward_state(current_state)  # afegir cost si obres o tanques? R(s,a,s')
                advance_rounds(jitsi, PHOTO_INTERVAL)
                next_state = jitsi.get_state()

                coor = get_coordinates_state(current_state)
                Q_t_minus_1 = Q[get_num_action_2(action)][coor[0]][coor[1]][coor[2]]

                #if t%(number_of_iterations/10)== 0 and t!=0:
                #    ALPHA= ALPHA/2

                Q[get_num_action_2(action)][coor[0]][coor[1]][coor[2]] = Q_t_minus_1 + ALPHA * (reward + GAMMA * max_a_2(Q, next_state) - Q_t_minus_1)

                policy_actual[coor[0]][coor[1]][coor[2]] = argmax_a_2(Q, current_state)
                random_int = randint(0, 99)
                if random_int < int(EPSILON * 100):
                    policy_actual[coor[0]][coor[1]][coor[2]] = get_action_2(randint(0, 2))

                autoscaler.set_policy(policy_actual)

                EPSILON = EPSILON - DECAYING_EPSILON

                current_state = next_state


            test_autoscaler(9,policy_actual)

        if option_selected == "1":

            test_autoscaler(10, None)

        if option_selected == "1":

            test_autoscaler(11, None)

        if option_selected == "1":

            test_autoscaler(12, None)

        if option_selected == "1":

            test_autoscaler(13, None)


    print(TOTAL_EXP / NUM_EXP)




















class ChanceNode:
    def __init__(self, x,y,action):
        self.action = action
        self.x = x
        self.y = y
        self.trans_probabilities = np.zeros((NUM_STATES,), dtype=float)

        if action=='N':

            self.set_trans_probability(x, y + 1, 0.7)
            self.set_trans_probability(x + 1, y, 0.15)
            self.set_trans_probability(x - 1, y, 0.15)
        elif action=='S':

            self.set_trans_probability(x, y - 1, 0.7)
            self.set_trans_probability(x + 1, y, 0.15)
            self.set_trans_probability(x - 1, y, 0.15)
        elif action=='W':

            self.set_trans_probability(x - 1, y, 0.7)
            self.set_trans_probability(x, y + 1, 0.15)
            self.set_trans_probability(x, y - 1, 0.15)
        elif action=='E':

            self.set_trans_probability(x + 1, y, 0.7)
            self.set_trans_probability(x, y + 1, 0.15)
            self.set_trans_probability(x, y - 1, 0.15)
        elif action=='·':
            self.set_trans_probability(x ,y, 0.8)
            self.set_trans_probability(x, y + 1, 0.05)
            self.set_trans_probability(x, y - 1, 0.05)
            self.set_trans_probability(x + 1, y, 0.05)
            self.set_trans_probability(x - 1, y, 0.05)

    def set_trans_probability(self,x,y,prob):

        if(0 <= x and x <= X_SIZE-1 and 0 <= y and y <= Y_SIZE-1):
            self.trans_probabilities[x + y*Y_SIZE] = prob
        else:
            self.trans_probabilities[self.x + self.y*Y_SIZE] += prob

    def possible_next_sates(self,states):

        possible_sates = []

        for x in range(X_SIZE):
            for y in range(Y_SIZE):
                prob_to_that_state = self.trans_probabilities[x + y * Y_SIZE]

                if prob_to_that_state != 0:
                    possible_sates.append([find_state(x, y, states), prob_to_that_state])
                    # print (str(x) + " - " +str(y) + " with prob: "+ str(prob_to_that_state))

        return possible_sates

    def next_state(self, states):

        possible_sates = self.possible_next_sates(states)

        # Com a minim hi haura dos possible_state's no?
        random_int = randint(0, 99)
        definitive_next_state = None

        acumulative=0

        for s in possible_sates:

            acumulative = acumulative + s[1]

            if random_int < acumulative * 100:
                definitive_next_state = s[0]
                break


        return definitive_next_state

class State:
    def __init__(self, x, y, end,cost):
        self.x = x
        self.y = y
        self.end = end
        self.chance_nodes = None
        self.cost = cost

        if end==False:
            self.chance_nodes = [ChanceNode(x,y,'N'),ChanceNode(x,y,'S'),ChanceNode(x,y,'W'),ChanceNode(x,y,'E'),ChanceNode(x,y,'·')]

    def next_state(self, action, states):

        if self.end==True:
            return self # o None?
        if action=='N':
            return self.chance_nodes[0].next_state(states)
        if action=='S':
            return self.chance_nodes[1].next_state(states)
        if action=='W':
            return self.chance_nodes[2].next_state(states)
        if action=='E':
            return self.chance_nodes[3].next_state(states)
        if action=='·':
            return self.chance_nodes[4].next_state(states)

    def get_chance_node(self, action):
        if self.end ==True:
            return None
        if action == 'N':
            return self.chance_nodes[0]
        if action == 'S':
            return self.chance_nodes[1]
        if action == 'W':
            return self.chance_nodes[2]
        if action == 'E':
            return self.chance_nodes[3]
        if action == '·':
            return self.chance_nodes[4]


def find_state(x,y,states):

    result = None

    for s in states:
        if s.x==x and s.y==y:
            result = s

    return result

def compute_cost(x,y):
    return (pow(x - OPTIMAL_X, 2) + pow(y - OPTIMAL_Y, 2))

def compute_reward(x,y,action):

    desired_x =x
    desired_y =y

    if action=='N':
        desired_y = desired_y + 1
    elif action=='S':
        desired_y = desired_y - 1
    elif action == 'W':
        desired_x = desired_x - 1
    elif action == 'E':
        desired_x = desired_x + 1
    elif action == '·':
        pass

    reward = 0.0

    if (0 <= desired_x and desired_x <= X_SIZE - 1 and 0 <= desired_y and desired_y <= Y_SIZE - 1):
        if action!='·':
            reward =  (compute_cost(x,y) - compute_cost(desired_x,desired_y)) - COST_STEP
    else:
        reward = -COST_STEP


    return reward

def get_nice_policy(states):
    policy = [None]*NUM_STATES

    for x in range(0,int((X_SIZE/2))):
        for y in range(Y_SIZE):
            policy[x + y*Y_SIZE] = 'S'

    for x in range(X_SIZE):
        for y in range(0,int((Y_SIZE/2))):
            policy[x + y * Y_SIZE] = 'E'

    for x in range(int((X_SIZE/2))+1,X_SIZE):
        for y in range(Y_SIZE):
            policy[x + y*Y_SIZE] = 'N'

    for x in range(int((X_SIZE/2)),X_SIZE):
        for y in range(int((Y_SIZE/2)+1),Y_SIZE):
            policy[x + y * Y_SIZE] = 'W'

    for x in range(X_SIZE):
        for y in range(Y_SIZE):
            if policy[x + y * Y_SIZE] == None:
                if states[x + y * Y_SIZE].end==False:
                    policy[x + y * Y_SIZE] = '·'



    return policy

def get_random_policy(states):

    policy= []

    for x in range(X_SIZE):
        for y in range(Y_SIZE):

            if(find_state(x,y,states).end==False):


                rand_dir = randint(0, 4)
                if rand_dir==0:
                    policy.append('N')
                if rand_dir==1:
                    policy.append('S')
                if rand_dir==2:
                    policy.append('W')
                if rand_dir==3:
                    policy.append('E')
                if rand_dir==4:
                    policy.append('·')




            else:
                policy.append(None)

    return policy

def get_fixed_random_policy(states):
    return ['S', 'N', 'S', '·', '·', 'N', 'S', '·', 'W', 'E', '·', 'S', '·', 'W', 'W', 'S', 'S', 'S', 'E', '·', 'E', 'E', 'W', '·', 'S', 'S', 'W', 'N', 'E', '·', 'N', '·', 'E', 'S', 'W', 'S', '·', 'N', 'W', '·', 'N', 'S', 'S', 'W', '·', 'S', '·', 'S', 'E']

def print_V(V):
    for i in range(X_SIZE):
        for j in range(Y_SIZE):
            print(str(i) + " " + str(j) + ": " + str(V[i + j * Y_SIZE]))

def print_policy(policy):
    print()
    for y in range(Y_SIZE - 1, -1, -1):
        for x in range(X_SIZE):

            if policy[x + y * Y_SIZE] != None:
                print(policy[x + y * Y_SIZE], end=" ")
            else:
                print(" ", end=" ")
        print()
    print()

def get_random_state(states):
    random_state = find_state(randint(0, X_SIZE - 1), randint(0, Y_SIZE - 1), states)
    while random_state.end == True:
        random_state = find_state(randint(0, X_SIZE - 1), randint(0, Y_SIZE - 1), states)
    return random_state

def print_wait_info(loop,number_of_iterations):
    if (loop % (number_of_iterations / 10) == 0 and loop != 0):
        print("|", end=' ')
        sys.stdout.flush()

def get_num_action(action):
    if(action=='N'):
        return 0
    if(action=='S'):
        return 1
    if(action=='W'):
        return 2
    if(action=='E'):
        return 3
    if(action=='·'):
        return 4

def get_action(action_num):
    if(action_num==0):
        return 'N'
    if(action_num==1):
        return 'S'
    if(action_num==2):
        return 'W'
    if(action_num==3):
        return 'E'
    if(action_num==4):
        return '·'

def argmax_a(Q,state):

    best_action = get_action(0)
    best_q = Q[0][state.x + state.y * Y_SIZE]

    if Q[1][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(1)
        best_q = Q[1][state.x + state.y * Y_SIZE]

    if Q[2][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(2)
        best_q = Q[2][state.x + state.y * Y_SIZE]

    if Q[3][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(3)
        best_q = Q[3][state.x + state.y * Y_SIZE]

    if Q[4][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(4)
        best_q = Q[4][state.x + state.y * Y_SIZE]

    return best_action

def max_a(Q,state):

    best_action = get_action(0)
    best_q = Q[0][state.x + state.y * Y_SIZE]

    if Q[1][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(1)
        best_q = Q[1][state.x + state.y * Y_SIZE]

    if Q[2][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(2)
        best_q = Q[2][state.x + state.y * Y_SIZE]

    if Q[3][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(3)
        best_q = Q[3][state.x + state.y * Y_SIZE]

    if Q[4][state.x + state.y * Y_SIZE] > best_q:
        best_action = get_action(4)
        best_q = Q[4][state.x + state.y * Y_SIZE]

    return best_q




def main():

    states = []

    for x in range(X_SIZE):
        for y in range(Y_SIZE):

            if (x==OPTIMAL_X and y == OPTIMAL_Y):
                states.append(State(x,y,OPTIMAL_FINAL_STATE,compute_cost(x,y)))
            else:
                states.append(State(x, y, False,compute_cost(x,y)))


    #policy_example = get_nice_policy(states) # is simply a list of strings...
    policy_example = get_fixed_random_policy(states)  # is simply a list of strings...

    print_policy(policy_example)

    print("What do you want to do?:")

    option_selected = input()




    # MODEL-FREE MDP ALGO: Q-LEARNING, FIND [ESTIMATED] OPTIMAL POLICY
    if option_selected == "5":

        policy_actual = policy_example

        ALPHA = 0.001  # Which is the right value? After 50% of iteration decay... after 80% decay... LEARNING RATE...
        current_state = get_random_state(states)
        Q = []
        for i in range(NUM_ACTIONS):
            Q.append([0.0] * NUM_STATES)

        EPSILON = 1.00
        number_of_iterations = 5000000
        DECAYING_EPSILON = 1.0/number_of_iterations

        for t in range(number_of_iterations):

            print_wait_info(t, number_of_iterations)

            action = policy_actual[current_state.x + current_state.y * Y_SIZE]
            next_state = current_state.next_state(action, states)
            reward = current_state.cost - next_state.cost

            Q_t_minus_1 = Q[get_num_action(action)][current_state.x + current_state.y * Y_SIZE]

            if t%(number_of_iterations/10)== 0 and t!=0:
                ALPHA= ALPHA/2

            Q[get_num_action(action)][current_state.x + current_state.y *Y_SIZE] = Q_t_minus_1 + ALPHA * (reward + GAMMA * max_a(Q, next_state) - Q_t_minus_1)

            policy_actual[current_state.x + current_state.y * Y_SIZE] = argmax_a(Q, current_state)
            random_int = randint(0, 99)
            if random_int < int(EPSILON * 100):
                policy_actual[current_state.x + current_state.y * Y_SIZE] = get_action(randint(0, 4))

            EPSILON= EPSILON - DECAYING_EPSILON

            #current_state = next_state
            current_state= get_random_state(states)

        print_policy(policy_actual)









    # Suposant que no ens donen les probabilitats, com trobes V de una policy pi?: TD learning... Osigui model free es com RL ja no...? CLAU...

    # After TD learning, Q learning...

    # potser podria usar threads per usar diferents CPU's...
    # mes endavant -> imagina que les transition probabilities cambiessin through time... que en el fons es el que passa al autoscaling problem...

    # l'ultim montecarlo esta bé perque aconsegueix estimator of V que es unbiased!! tot i que es veu que la variance es bastant gran...

    ## THEORY ##
    # It would be nice to undestand why DP policy evaluation algo. works... is because you are using bootstrapping...
    # It's much easier to understand MC policy evaluation algo. works... it relies on sampling, not on bootstrapping...

if __name__ == '__main__':
    main2()